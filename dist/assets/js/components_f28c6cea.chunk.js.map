{"version":3,"sources":["webpack:///./app/utils/util/index.js","webpack:///./app/components/Tree/index.jsx","webpack:///./app/components/TreeSelect/index.jsx","webpack:///./app/utils/logger/index.js","webpack:///./app/utils/MsgCenter/index.jsx","webpack:///./app/utils/Store/index.js","webpack:///./app/utils/WebSocket/index.js","webpack:///./app/components/index.js","webpack:///./app/components/Tree/SearchTree.jsx","webpack:///./app/utils/index.js","webpack:///./app/components/Tree/index.scss","webpack:///./app/utils/IndexedDB/index.js"],"names":["toTreeData","dataList","config","items","item","idMap","expand","i","length","row","Object","assign","id","name","data","pId","push","pitem","children","extProp","_extendTreeDataProp","forEach","p","val","Array","analysisUrlSearch","search","pathParams","split","Map","result","map","isArrayEqual","arr1","arr2","_toRealArray","convertArray","MobX","isObservableArray","slice","_","isEqual","valuesToStrings","values","isUndefined","isInteger","isString","value","generateHash","input","I64BIT_TABLE","hash","charCodeAt","retValue","_parseItemValue","dataType","formatDate","date","format","e","logger","error","toString","getDateStamp","stampType","set","valueOf","isRange","buildFilterParams","args","buildFieldRule","key","fields","vals","field","$$index","indexOf","dateType","substring","$index","op","endsWith","_params","filterGroup","groups","rules","searchRule","orGroups","isArray","orParamsItem","newGroupItem","orKey","mapPropsToFields","parseFieldValue","fieldObj","fieldConfig","noExpand","moment","isEmpty","trueValue","getFieldValue","rangeIndex","realKey","innerField","replace","substr","lastIndexOf","getFieldName","arrValues","createFormField","entries","entry","buildFormData","formData","_formData","tempValue","temp","formatYYYYMMDD","Date","sha256Encode","cryptoSha256","base64Encode","cryptoBase64","stringify","cryptoUtf8","parse","styles","require","TreeComponent","state","treeData","shouldUpdateWhenMainPropsChange","nextProps","props","treeUrl","treeParams","Util","shouldUpdateWhenStateChange","nextState","initTreeData","setTreeData","setState","getUrlParams","query","handleRefresh","onRefresh","getTreeData","this","updateWhenMainPropsChange","showFrame","hiddenValues","disabledValues","disableCheckboxValues","title","preHandleTreeData","defaultCheckedKeys","checkedKeys","defaultExpandedKeys","expandedKeys","defaultSelectedKeys","selectedKeys","treeFrameClass","classNames","tree","hidden","includes","disabled","disableCheckbox","className","header","type","onClick","React","Component","propTypes","PropTypes","bool","array","string","object","treeSite","preHandleData","func","defaultProps","TreeSelectComponent","inputValue","onChange","label","extra","log","onSearch","handleTreeData","shouldDisableCheckbox","filter","isFunction","multiple","forceUpdateTree","notFoundContent","forceUpdate","defaultValue","treeDefaultExpandedKeys","treeDataLength","size","style","width","oneOfType","MobxPropTypes","observableArray","showSearch","showCheckedStrategy","SHOW_ALL","filterTreeNode","treeNode","toLowerCase","optionFilterProp","Logger","setLevel","level","_level","_print","console","_levels","arguments","MsgCenter","topicSubsMap","uuid","topic","resultObj","has","get","sub","_getUUID","subscribe","token","subs","splice","clear","Store","opts","preKey","localStorage","removeItem","newKey","JSON","getItem","setItem","ApiConfig","WebSocket","site","wsUrl","params","url","_makeURL","_init","userLocalStore","client","window","onerror","reconnect","onopen","info","isConnected","_send","sendSubscribe","heartCheck","onclose","onmessage","json","close","batchs","subscribeMap","lockReconnect","allowReconnectNum","curReconnectNum","send","msgType","delete","startsWith","_concatSearch","returnUrl","domain","base","location","protocol","host","searchParams","URLSearchParams","paramStr","append","reset","start","timeout","timeoutObj","serverTimeoutObj","clearTimeout","setTimeout","TreeNode","QUICK_SEARCH_DELAY","SearchTreeComponent","treeList","treeDataCopy","autoExpandParent","handleChange","event","target","_filterExpandedKeys","handleItemClick","onAddNode","onModNode","onOpen","onContextMenuClick","onDelNode","onSelect","node","onExpand","onRightClick","rightable","renderRightClickMenu","getSelection","removeAllRanges","onDrop","dragNode","dropToGap","dropPosition","targetNodeData","dragNodeData","dropType","debounce","_getParentKey","self","parentKey","some","renderTreeNode","treeNodeConfig","addDiyClass","addDiyDom","itemData","index","beforeStr","afterStr","treeNodeClassName","classnames","treeNodeProps","searchKey","dropdown","ReactDOM","unmountComponentAtNode","cmContainer","disabledContext","contextMenuKeys","defaultContextMenuMap","Item","placement","onConfirm","okText","cancelText","menu","iconKey","action","overlay","trigger","defaultVisible","container","getContainer","position","left","pageX","top","pageY","render","document","createElement","body","appendChild","placeholder","element","isRequired","onItemClick","showLine","module","exports","_initStore","db","storeName","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","createIndex","unique","_store","mode","Promise","resolve","dbInstance","indexedDB","IBORDB","opener","transaction","objectStore","clearStore","then","insertData","reject","request","add","onsuccess","catch","getDataByKey","updateData","put","deleteData","queryData","openCursor","results","cursor","continue","_db","_dbName","T_CUSTOM_TABLE","initIndexedDB","cb","open","onupgradeneeded","wrapperTableName","tableName"],"mappings":"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","file":"assets/js/components_f28c6cea.chunk.js","sourcesContent":["/**\n * 工具库，专用于处理数据转化\n */\nimport MobX from 'mobx';\nimport { Form } from 'antd';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport cryptoSha256 from 'crypto-js/sha256';\nimport cryptoUtf8 from 'crypto-js/enc-utf8';\nimport cryptoBase64 from 'crypto-js/enc-base64';\n\nconst toTreeData = (dataList = [], config = {}) => {\n    const _extendTreeDataProp = (items, extProp = {}) => {\n        items.forEach((item) => {\n            const children = config.expand ? item.children : item.items;\n            for (let p in extProp) {\n                const val = extProp[p];\n                if (typeof val === 'function') {\n                    item[p] = val(item);\n                } else {\n                    item[p] = val;\n                }\n                if (children instanceof Array) {\n                    _extendTreeDataProp(children, extProp);\n                }\n            }\n        });\n    };\n    let items = [];\n    let item = null;\n    let idMap = {}; // key:id,value:item\n    const { expand = false } = config; // 标记是否在处理时将数据平铺\n    // 将所有的菜单保存到idMap,如果是一级菜单，还要存放到items数组\n    for (let i = 0; i < dataList.length; i++) {\n        let row = dataList[i];\n        item = {};\n        if (expand) { // 支持对象属性平铺，也即不要将剩余的属性放到data数量里面\n            Object.assign(item, row);\n            item.id = `${row.id}`;\n        } else {\n            item.id = `${row.id}`;\n            item.name = row.name;\n            item.data = Object.assign({}, row);\n        }\n\n        if (row.id == row.pId || !row.pId || row.pId == \"0\") {\n            items.push(item);\n        }\n        idMap[row.id] = item;\n    }\n    // 遍历所有的非一级菜单，找到它们的父节点，并存放到父节点的items属性下\n    for (let i = 0; i < dataList.length; i++) {\n        let row = dataList[i];\n        if (row.id == row.pId || !row.pId || row.pId == \"0\") {\n            continue;\n        }\n        let pitem = idMap[row.pId];\n        item = idMap[row.id];\n        if (pitem) {\n            if (expand) {\n                if (!pitem.children) {\n                    pitem.children = [];\n                }\n                pitem.children.push(item);\n            } else {\n                if (!pitem.items) {\n                    pitem.items = [];\n                }\n                pitem.items.push(item);\n            }\n        }\n    }\n    // 根据配置增加属性\n    if (config.extProp) {\n        _extendTreeDataProp(items, config.extProp);\n    }\n\n    return items;\n};\n\n/**\n * 解析url的search，返回kv对\n */\nconst analysisUrlSearch = (search) => {\n    let pathParams = search.split('?')[1];\n    if (!pathParams) return new Map();\n\n    let pathParamsArr = pathParams.split('&');\n    let result = pathParamsArr.map((item) => {\n        return item.split('=');\n    });\n\n    return new Map(result);\n};\n\n/**\n * 使用 lodash 对比两个真实数组是否相同\n * 由于 ims 系统当中引用了 mobx 的观察者开发模式\n * 所以在使用被观察数组数据时要将其转为正常数组再进行其他操作\n * @param arr1\n * @param arr2\n * @returns {boolean}\n */\nconst isArrayEqual = (arr1, arr2) => {\n    const _toRealArray = (convertArray = []) => {\n        if (MobX.isObservableArray(convertArray)) {\n            return convertArray.slice();\n        } else {\n            return convertArray;\n        }\n    };\n    return _.isEqual(_toRealArray(arr1), _toRealArray(arr2));\n};\n\n/**\n * 将单个值或某个数组内的所有值转成字符串\n * 主要是为了兼容外部传入 value/defaultValue 等值时可以直接传数字类型\n * @param values\n * @returns {*}\n */\nconst valuesToStrings = (values) => {\n    // 如果是空，则返回\n    if (values === null) {\n        return values;\n    }\n    if (!_.isUndefined(values)) {\n        if (_.isInteger(values)) { // 数字类型直接转成字符类型\n            values += '';\n        } else if (!_.isString(values)) { // 非数字非字符类型, 剩下的类型视为数组类型 Array | ObservableArray\n            values = values.map((value) => { // 将数组内所有值转成字符类型\n                if (typeof value === 'object') {\n                    return value; // 如果项为对象则直接返回\n                }\n                return value + '';\n            });\n        }\n    }\n    return values;\n};\n\n/**\n * 用于生成 input 的值对应的唯一哈希值\n * @param input\n * @return {string}\n */\nconst generateHash = (input) => {\n    let I64BIT_TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-'.split('');\n    let hash = 5381;\n    let i = input.length - 1;\n\n    if (typeof input === 'string') {\n        for (input.length - 1; i > -1; i--) {\n            hash += (hash << 5) + input.charCodeAt(i);\n        }\n    } else {\n        for (; i > -1; i--) {\n            hash += (hash << 5) + input[i];\n        }\n    }\n\n    let value = hash & 0x7FFFFFFF;\n    let retValue = '';\n\n    do {\n        retValue += I64BIT_TABLE[value & 0x3F];\n    }\n    while (value >>= 6);\n\n    return retValue;\n};\n\n// 解析参数\nconst _parseItemValue = (value, dataType) => {\n    const dateStart = \"start\";\n    const dateEnd = \"end\";\n    const formatDate = (date, format) => {\n        try {\n            return date.format(format);\n        } catch (e) {\n            logger.error('parse value error', date, dataType);\n            return date && date.toString();\n        }\n    };\n\n    const getDateStamp = (date, stampType) => {\n        try {\n            switch (stampType) {\n                case dateStart:\n                    return date.set({ 'hour': 0, 'minute': 0, 'second': 0, 'millisecond': 0 })\n                        .valueOf();\n                case dateEnd:\n                    return date.set({ 'hour': 23, 'minute': 59, 'second': 59, 'millisecond': 999 })\n                        .valueOf();\n                default:\n                    return date.valueOf();\n            }\n        } catch (e) {\n            logger.error('parse value error', date, dataType);\n            return date && date.toString();\n        }\n    };\n\n    let format = null;\n    let isRange = false;\n    switch (dataType) {\n        case 'array':\n            if (!(value instanceof Array)) {\n                value = [value];\n            }\n            return value;\n        case 'boolean':\n            return value ? 1 : 0;\n        case 'daterange':\n            isRange = true;\n        case 'date':\n            format = 'YYYY-MM-DD';\n            break;\n        case 'datetimerange':\n            isRange = true;\n        case 'datetime':\n            format = \"YYYY-MM-DD HH:mm:ss\";\n        case 'timerange':\n            isRange = true;\n        case 'time':\n            // 日期类型格式化\n            format = \"HH:mm:ss\";\n        case 'timestamprange':\n            isRange = true;\n            break;\n        case 'timestamp':\n            return getDateStamp(value);\n        case 's_timestamp':\n            return getDateStamp(value, dateStart);\n        case 'e_timestamp':\n            return getDateStamp(value, dateEnd);\n        case 'datestamp':\n            return getDateStamp(value);\n        default:\n            logger.error('not support this type ', dataType);\n            return value;\n    }\n\n    // 如果是范围格式的\n    if (isRange) {\n        if (value instanceof Array) {\n            if (!format) {\n                return value.map((item) => {\n                    return getDateStamp(item);\n                });\n            } else {\n                return value.map((item) => {\n                    return formatDate(item, format);\n                });\n            }\n        } else {\n            logger.error('parse value error', value, dataType);\n            return value;\n        }\n    } else {\n        return formatDate(value, format);\n    }\n};\n\n// 对象变参，每一个都是一个key-valule形式的对象\nconst buildFilterParams = (...args) => {\n    const buildFieldRule = (key, value) => {\n        const fields = key.split(\"-\");\n        const vals = [];\n        if (fields.length === 1) {\n            vals.push(value);\n        } else {\n            vals.push(...value);\n        }\n        return fields.map((field, i) => {\n            let $$index = field.indexOf('$$');\n            if ($$index > -1) {\n                // 需再次解析的字段，例如 startTime$lte$$timestamp@date\n                // 根据@后面的数据类型解析\n                let dateType = field.substring($$index + 2); // timestamp@date\n                value = _parseItemValue(vals[i], dateType);\n                field = field.substring(0, $$index); // startTime$lte\n            } else {\n                value = vals[i];\n            }\n            let $index = field.indexOf('$');\n            let op = 'eq';\n            if ($index > -1) {\n                op = field.substring($index + 1); // lte\n                if (op.endsWith('Ex')) { // status$inEx => status$in\n                    op = op.substring(0, op.length - 2);\n                }\n                field = field.substring(0, $index); // startTime\n            }\n            return { field: field, op: op, value: value };\n        });\n    };\n\n    const _params = _.assign({}, ...args);\n    const filterGroup = { op: 'and', groups: [{ op: 'and', rules: [] }] };\n    const searchRule = {};\n    for (let key in _params) {\n        switch (key) {\n            case 'page':\n            case 'pageSize':\n            case 'orderBy':\n            case 'distinct':\n                // 分页或者排序字段\n                searchRule[key] = _params[key];\n                break;\n            case '$$or':\n                const orGroups = { op: 'or', groups: [] };\n                filterGroup.groups.push(orGroups);\n                const orParams = _.isArray(_params[key]) ? _params[key] : [_params[key]]; // convert to Array\n                orParams.forEach((orParamsItem) => {\n                    const newGroupItem = { op: 'and', rules: [] };\n                    orGroups.groups.push(newGroupItem);\n                    for (let orKey in orParamsItem) {\n                        newGroupItem.rules.push(...buildFieldRule(orKey, orParamsItem[orKey]));\n                    }\n                });\n                break;\n            default:\n                const value = _params[key];\n                if (value != null) {\n                    filterGroup.groups[0].rules.push(...buildFieldRule(key, value));\n                }\n        }\n    }\n\n    return { filterGroup, searchRule };\n};\n\n// 表单参数解析\nconst mapPropsToFields = (data = {}, config = {}) => {\n    const getFieldValue = (val, fieldConfig) => {\n        const { dataType, format } = fieldConfig;\n        switch (dataType) {\n            case 'date':\n            case 'datetime':\n            case 'time':\n            case 'timestamp':\n            case 's_timestamp':\n            case 'e_timestamp':\n            case 'datestamp':\n            case 'daterange':\n            case 'datetimerange':\n            case 'timerange':\n            case 'timestamprange':\n                try {\n                    if (format) {\n                        return moment(val, format);\n                    } else {\n                        return moment(val);\n                    }\n                } catch (e) {\n                    logger.error('propToFieldValue error', val, fieldConfig);\n                    return val;\n                }\n            case 'array':\n            case 'arrayStr':\n                return _.isEmpty(val) ? [] : val.split(\",\");\n            case 'boolean':\n                const { trueValue = 1 } = fieldConfig;\n                return val === trueValue;\n            default:\n                logger.error('not support this type ', dataType);\n                return val;\n        }\n    };\n    // 获取参数名\n    const getFieldName = (key, fieldConfig) => {\n        let { field, innerField, dataType } = fieldConfig;\n        if (field) {\n            // field = 'def'\n            // key = 'abc' => 'def'\n            return field;\n        }\n        if (innerField) {\n            // field = 'taskId'\n            // key = 'id' => 'taskId'\n            // key = 'tasks[0].id' => 'tasks[0].taskId'\n            if (key.indexOf('.') > -1) {\n                // 此处使用 replace 替换时如果出现 $$ 字符会被认为是直接量符号，因为先将匹配的字符串替换为空再加上 innerField\n                return _.replace(key, key.substr(_.lastIndexOf(key, '.') + 1), '') + innerField;\n            } else {\n                return innerField;\n            }\n        }\n        if (dataType) {\n            return key + '$$' + dataType;\n        }\n        return key;\n    };\n\n    const parseFieldValue = (fieldObj, key, value, fieldConfig) => {\n        // 在 fieldConfig.noExpand 属性值不为真的情况下 且 值是数组或者对象，需解析成 a[0].b = 1 或者 c.d = 1的形式\n        if (!(fieldConfig && fieldConfig.noExpand) && typeof value === 'object') {\n            if (value instanceof Array) { // a:[{b:1}] => a[0].b = 1\n                for (let i = 0; i < value.length; i++) {\n                    let newKey = key + '[' + i + ']';\n                    parseFieldValue(fieldObj, newKey, value[i], fieldConfig && fieldConfig[i]);\n                }\n            } else { // Object a:{b:1} => a.b = 1\n                for (let p in value) {\n                    let newKey = key + '.' + p;\n                    parseFieldValue(fieldObj, newKey, value[p], fieldConfig && fieldConfig[p]);\n                }\n            }\n        } else { // string/number/...\n            if (fieldConfig) {\n                let val = getFieldValue(value, fieldConfig);\n                const { field = key, rangeIndex } = fieldConfig;\n                let realKey = getFieldName(key, fieldConfig);\n                if (field) {\n                    if (rangeIndex != null) {\n                        let { [realKey]: arrValues = { value: [] } } = fieldObj;\n                        arrValues.value[rangeIndex] = val;\n                        fieldObj[realKey] = Form.createFormField(arrValues);\n                    } else {\n                        fieldObj[realKey] = Form.createFormField({ value: val });\n                    }\n                }\n            } else {\n                fieldObj[key] = Form.createFormField({ value: value });\n            }\n        }\n    };\n\n    let fieldObj = {};\n    let entries = Object.entries(data);\n    for (let entry of entries) {\n        let [key, value] = entry;\n        if (value != null) {\n            let fieldConfig = config[key];\n            parseFieldValue(fieldObj, key, value, fieldConfig);\n        }\n    }\n    return fieldObj;\n};\n\nconst buildFormData = (formData = {}) => {\n    let _formData = {};\n    let entries = Object.entries(formData);\n    for (let entry of entries) {\n        let [key, value] = entry;\n        const vals = [];\n        const fields = key.split('-');// startTime$$timestamp-endTime$$timestamp\n        if (fields.length === 1) {\n            vals.push(value);\n        } else {\n            value = value || [];\n            vals.push(...value);\n        }\n        fields.forEach((field, i) => {\n            let $$index = field.indexOf('$$');\n            if ($$index > -1) {\n                // 传给接口的字段特殊处理\n                let dataType = field.substring($$index + 2);\n                let tempValue = vals[i];\n\n                // 如果当前对象类型为数组\n                if (dataType === \"array\" && tempValue instanceof Array) {\n                    vals[i] = tempValue.map((temp) => {\n                        // 如果元素为对象，则进行递归编译子参数\n                        if (temp instanceof Object) {\n                            temp = buildFormData(temp);\n                        }\n                        return temp;\n                    });\n                } else {\n                    vals[i] = _parseItemValue(tempValue, dataType);\n                }\n                field = field.substring(0, $$index);\n            }\n            _formData[field] = vals[i];\n        });\n    }\n    return _formData;\n};\n\nconst format = 'YYYY-MM-DD';\n\nfunction formatYYYYMMDD(value) {\n    return moment(new Date(value))\n        .format(format);\n}\n\nconst sha256Encode = (value) => {\n    return cryptoSha256(value)\n        .toString();\n};\n\nconst base64Encode = (value) => {\n    return cryptoBase64.stringify(cryptoUtf8.parse(value));\n};\n\nexport {\n    toTreeData,\n    isArrayEqual,\n    valuesToStrings,\n    generateHash,\n    buildFilterParams,\n    mapPropsToFields,\n    buildFormData,\n    analysisUrlSearch,\n    formatYYYYMMDD,\n    sha256Encode,\n    base64Encode\n};\n\nexport default {\n    toTreeData,\n    isArrayEqual,\n    valuesToStrings,\n    generateHash,\n    buildFilterParams,\n    mapPropsToFields,\n    buildFormData,\n    analysisUrlSearch,\n    formatYYYYMMDD,\n    sha256Encode,\n    base64Encode\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, message } from 'antd';\nimport _ from 'lodash';\nimport classNames from 'classnames';\nimport Util from 'utils/util';\nimport SearchTree from './SearchTree';\n\nconst styles = require('./index.scss');\n\nclass TreeComponent extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    //     // this.api = new API(props.treeSite);\n    // }\n\n    // TODO 可优化初始化render,现在初始化至少有两次render\n    state = {\n        treeData: []\n    };\n\n    componentDidMount() {\n        this.initTreeData(this.props);\n    }\n\n    /**\n     * 判断 props 的更改是否达到了更新组件的条件\n     * props 的更新操作不直接造成组件的更新, 而是通过 iniTreeData 中去触发 setState 方法重新渲染组件\n     * @param nextProps\n     */\n    componentWillReceiveProps(nextProps) {\n        if (this.shouldUpdateWhenMainPropsChange(nextProps)) {\n            this.updateWhenMainPropsChange = true;\n            this.initTreeData(nextProps);\n        } else {\n            this.updateWhenMainPropsChange = false;\n        }\n    }\n\n    /**\n     * 如果是 state 的改变引起的更新操作, 则一定会重新渲染组件\n     * 如果是 props 的改变造成的更新则不进行重新的 render\n     * 因为 componentWillReceiveProps 里已经进行了 setState 操作\n     * props 的变化引起的更新行为最终会体现为 state 的更新操作\n     * 所以这里只允许 state 的变化引起组件的重新渲染\n     * @param nextProps\n     * @param nextState\n     * @returns {boolean}\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.shouldUpdateWhenStateChange(nextState)\n            || !this.updateWhenMainPropsChange;\n    }\n\n    /**\n     * 以下属性有变化即视为 props 的更改会造成组件重新渲染\n     * @param nextProps\n     * @returns {*|boolean}\n     */\n    shouldUpdateWhenMainPropsChange = (nextProps) => {\n        const { treeData, treeUrl, treeParams } = this.props;\n        return (\n            !Util.isArrayEqual(treeData, nextProps.treeData)\n            || !_.isEqual(treeParams, nextProps.treeParams)\n            || treeUrl !== nextProps.treeUrl\n        );\n    };\n    /**\n     * 判断是 state 的变化是否会影响组件重新渲染\n     * @param nextState\n     * @returns {boolean}\n     */\n    shouldUpdateWhenStateChange = (nextState) => {\n        const { treeData } = this.state;\n        return !Util.isArrayEqual(treeData, nextState.treeData);\n    };\n    initTreeData = (props) => {\n        const { treeData, treeUrl } = props;\n        if (treeData.length) {\n            this.setTreeData(treeData);\n        } else if (treeUrl) {\n            // const params = this.getUrlParams(props);\n            // this.api.get(treeUrl, params)\n            //     .then((res) => {\n            //         if (res.code == 200) {\n            //             this.setTreeData(res.data.list);\n            //         } else {\n            //             message.error(res);\n            //         }\n            //     });\n        }\n    };\n    setTreeData = (treeData = []) => {\n        this.setState({\n            treeData\n        });\n    };\n    getUrlParams = (props) => {\n        return {\n            query: Util.buildFilterParams(props.treeParams)\n        };\n    };\n    handleRefresh = () => {\n        const { treeData, onRefresh } = this.props;\n        // 如果 treeData 由外部组件传入,则调用外部传入的刷新函数进行刷新\n        if (treeData.length) {\n            onRefresh();\n        } else {\n            this.initTreeData(this.props);\n        }\n    };\n\n    // 获取treeData\n    getTreeData = () => {\n        return this.state.treeData;\n    };\n\n    render() {\n        let { treeData } = this.state;\n        let {\n            showFrame, hiddenValues, disabledValues, disableCheckboxValues,\n            title, preHandleTreeData, defaultCheckedKeys, checkedKeys,\n            defaultExpandedKeys, expandedKeys, defaultSelectedKeys, selectedKeys\n        } = this.props;\n\n        // 将以下数组转成字符串数据以支持外部组件直接传入 int 类型数组\n        hiddenValues = Util.valuesToStrings(hiddenValues);\n        disabledValues = Util.valuesToStrings(disabledValues);\n        disableCheckboxValues = Util.valuesToStrings(disableCheckboxValues);\n        defaultCheckedKeys = Util.valuesToStrings(defaultCheckedKeys);\n        checkedKeys = Util.valuesToStrings(checkedKeys);\n        defaultExpandedKeys = Util.valuesToStrings(defaultExpandedKeys);\n        expandedKeys = Util.valuesToStrings(expandedKeys);\n        defaultSelectedKeys = Util.valuesToStrings(defaultSelectedKeys);\n        selectedKeys = Util.valuesToStrings(selectedKeys);\n\n        const treeFrameClass = classNames({\n            [`${styles.tree}`]: true,\n            [`${styles['simple-tree']}`]: !showFrame,\n            'tree-container': true,\n        });\n\n        // 预处理树节点数据,如果外部有传入处理函数的话\n        treeData.forEach((item) => {\n            item.hidden = hiddenValues.includes(`${item.id}`);\n            item.disabled = disabledValues.includes(`${item.id}`);\n            item.disableCheckbox = disableCheckboxValues.includes(`${item.id}`);\n        });\n        treeData = preHandleTreeData(treeData);\n\n        const props = {\n            defaultCheckedKeys,\n            defaultExpandedKeys,\n            defaultSelectedKeys,\n            treeData\n        };\n\n        // 当 this.props.value 不为空时才能传入 value 这个字段到 Select 组件, 不然会导致默认显示出 bug\n        !_.isUndefined(checkedKeys) && (props.checkedKeys = checkedKeys);\n        !_.isUndefined(expandedKeys) && (props.expandedKeys = expandedKeys);\n        !_.isUndefined(selectedKeys) && (props.selectedKeys = selectedKeys);\n\n        return (\n            <div className={treeFrameClass}>\n                {showFrame && (\n                    <div className={styles.header + ' tree-header'}>\n                        <div>\n                            {title}\n                        </div>\n                        <Icon type=\"reload\" onClick={this.handleRefresh} className=\"btn-reload\"/>\n                    </div>\n                )}\n                {treeData.length ? <SearchTree {...this.props} {...props}/> : null}\n            </div>\n        );\n    }\n}\n\nTreeComponent.propTypes = {\n    showFrame: PropTypes.bool,\n    treeData: PropTypes.array,\n    treeUrl: PropTypes.string,\n    treeParams: PropTypes.object,\n    treeSite: PropTypes.string,\n    preHandleData: PropTypes.func,\n    hiddenValues: PropTypes.array,\n    disabledValues: PropTypes.array,\n    disableCheckboxValues: PropTypes.array,\n};\n\nTreeComponent.defaultProps = {\n    showFrame: true, // 是否显示树组件外框(包含标题bar和border)\n    treeData: [],\n    treeParams: {}, // 获取数据过滤参数\n    treeSite: 'auth', // 将从指定site获取数据\n    onRefresh: () => {\n    },\n    preHandleTreeData: (treeData) => {\n        return treeData;\n    }, // 预处理数据\n    hiddenValues: [], // 隐藏树节点列表\n    disabledValues: [], // 禁用(不隐藏)树节点列表\n    disableCheckboxValues: [] // 禁用checkbox树节点列表\n};\n\nexport default TreeComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TreeSelect, message } from 'antd';\nimport { PropTypes as MobxPropTypes } from \"mobx-react\";\nimport _ from 'lodash';\nimport Util from 'utils/util';\n\nrequire('./index.scss');\n\nclass TreeSelectComponent extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.api = new API(props.treeSite);\n    // }\n\n    state = {\n        inputValue: '', // 搜索文字受控\n        treeData: []\n    };\n\n    componentDidMount() {\n        this.initTreeData(this.props);\n    }\n\n    /**\n     * 判断 props 的更改是否达到了更新组件的条件\n     * props 的更新操作不直接造成组件的更新, 而是通过 iniTreeData 中去触发 setState 方法重新渲染组件\n     * @param nextProps\n     */\n    componentWillReceiveProps(nextProps) {\n        // 判断如果存在 value 属性, 且当 value 从有到无时(视为清空)清空 inputValue 值\n        if ('value' in nextProps && nextProps.multiple) {\n            if (_.isUndefined(nextProps.value) && !_.isEqual(this.props.value, nextProps.value)) {\n                this.setState({ inputValue: '' });\n            }\n        }\n        // 一旦 treeSite 有变化，重新赋值 this.api\n        // if (nextProps.treeSite && this.props.treeSite !== nextProps.treeSite) {\n        //     this.api = new API(nextProps.treeSite);\n        // }\n        if (nextProps.forceUpdateTree\n            || this.shouldUpdateWhenMainPropsChange(nextProps)) {\n            this.updateWhenMainPropsChange = true;\n            // 如果判断到 notFoundContent 属性有变化, 则进行一次强制刷新, 防止请求数据后前后数据仍然一致导致无法重新 render 的 bug\n            if (!_.isEqual(this.props.notFoundContent, nextProps.notFoundContent)) {\n                this.forceUpdate();\n            }\n            this.initTreeData(nextProps);\n        } else {\n            this.updateWhenMainPropsChange = false;\n        }\n    }\n\n    /**\n     * 如果是 props 的改变造成的更新则不进行重新的 render\n     * 因为 componentWillReceiveProps 里已经进行了 setState 操作\n     * 如果 forceUpdateTree 属性为 true 则会强制重新渲染组件\n     * @param nextProps\n     * @param nextState\n     * @returns {boolean}\n     */\n    // TODO 应该移除此判断\n    // 此处存在 bug ,当既有 main props 变化也有非 main props 的变化时, 在 main props 请求数据返回一样的情况下(比如均为空数组), 不会造成重新 render, 这个时候非 main props 的变化会被忽略\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.shouldUpdateWhenStateChange(nextState) || !this.updateWhenMainPropsChange;\n    }\n\n    /**\n     * 以下属性有变化即视为 props 的更改会造成组件重新渲染\n     * @param nextProps\n     * @returns {*|boolean}\n     */\n    shouldUpdateWhenMainPropsChange = (nextProps) => {\n        const { treeData, treeUrl, treeParams } = this.props;\n        return (\n            !Util.isArrayEqual(treeData, nextProps.treeData)\n            || !_.isEqual(treeParams, nextProps.treeParams)\n            || treeUrl !== nextProps.treeUrl\n        );\n    };\n    /**\n     * 判断是 state 的变化是否会影响组件重新渲染\n     * @param nextState\n     * @returns {boolean}\n     */\n    shouldUpdateWhenStateChange = (nextState) => {\n        const { treeData } = this.state;\n        return !Util.isArrayEqual(treeData, nextState.treeData);\n    };\n    initTreeData = (props) => {\n        const { treeData, treeUrl } = props;\n        if (treeData.length) {\n            this.setTreeData(treeData);\n        } else if (treeUrl) {\n            // const params = this.getUrlParams(props);\n            // this.api.get(treeUrl, params)\n            //     .then((res) => {\n            //         if (res.code == 200) {\n            //             this.setTreeData(res.data.list);\n            //         } else {\n            //             message.error(res);\n            //         }\n            //     });\n        }\n    };\n    setTreeData = (treeData = []) => {\n        this.setState({\n            treeData\n        });\n    };\n    getUrlParams = (props) => {\n        return {\n            query: Util.buildFilterParams(props.treeParams)\n        };\n    };\n    onChange = (value, label, extra) => {\n        logger.log(\"value:\", value);\n        this.props.onChange(value, label, extra);\n    };\n    onSearch = (inputValue) => {\n        logger.log(\"search value:\", inputValue);\n        this.setState({ inputValue });\n    };\n    handleTreeData = (treeData) => {\n        const config = {\n            expand: true,\n            extProp: {\n                value: (item) => {\n                    return item.id;\n                },\n                label: (item) => {\n                    return item.name;\n                },\n                key: (item) => {\n                    return item.id;\n                },\n            }\n        };\n\n        let { disabledValues, hiddenValues, shouldDisableCheckbox } = this.props;\n        disabledValues = Util.valuesToStrings(disabledValues);\n        hiddenValues = Util.valuesToStrings(hiddenValues);\n\n        if (hiddenValues.length) {\n            treeData = treeData.filter((item) => {\n                return !hiddenValues.includes(`${item.id}`);\n            });\n        }\n\n        treeData.forEach((item) => {\n            if (disabledValues.includes(`${item.id}`)) {\n                item.disabled = true;\n            }\n            _.isFunction(shouldDisableCheckbox) && (item.disableCheckbox = shouldDisableCheckbox(item));\n        });\n\n        return Util.toTreeData(treeData, config);\n    };\n\n    render() {\n        let { treeData, inputValue } = this.state;\n        let { defaultValue, value, treeDefaultExpandedKeys, preHandleTreeData, notFoundContent } = this.props;\n        const treeDataLength = treeData.length;\n\n        defaultValue = Util.valuesToStrings(defaultValue);\n        value = Util.valuesToStrings(value);\n        treeDefaultExpandedKeys = Util.valuesToStrings(treeDefaultExpandedKeys);\n\n        treeData && (treeData = preHandleTreeData(treeData));\n        treeData && (treeData = this.handleTreeData(treeData));\n\n        const props = {\n            size: 'small',\n            defaultValue,\n            inputValue,\n            treeDefaultExpandedKeys,\n            treeData,\n            onChange: this.onChange,\n            onSearch: this.onSearch,\n            style: { width: '100%' }\n        };\n\n        // 当 this.props.value 不为空时才能传入 value 这个字段到 Select 组件, 不然会导致默认显示出 bug\n        !_.isUndefined(value) && (props.value = value);\n\n        return (\n            treeDataLength ? <TreeSelect {...this.props} {...props}/> :\n                <TreeSelect size=\"small\" key=\"empty-tree-select\" notFoundContent={notFoundContent}\n                            style={{ width: \"100%\" }}/>\n        );\n    }\n}\n\nTreeSelectComponent.propTypes = {\n    treeData: PropTypes.oneOfType([\n        PropTypes.array,\n        MobxPropTypes.observableArray\n    ]),\n    treeUrl: PropTypes.string,\n    treeParams: PropTypes.object,\n    treeSite: PropTypes.string,\n    forceUpdateTree: PropTypes.bool,\n    preHandleData: PropTypes.func,\n    disabledValues: PropTypes.array,\n    hiddenValues: PropTypes.array,\n    shouldDisableCheckbox: PropTypes.func\n};\nTreeSelectComponent.defaultProps = {\n    treeData: [],\n    treeParams: {}, // 获取数据过滤参数\n    treeSite: 'auth', // 将从指定site获取数据\n    preHandleTreeData: (treeData) => {\n        return treeData;\n    }, // 预处理数据\n    disabledValues: [], // 禁用节点id列表\n    hiddenValues: [], // 隐藏节点id列表\n    // ================= Ant-TreeSelect =================\n    showSearch: true,\n    notFoundContent: \"暂无数据\",\n    onChange: () => {\n    },\n    showCheckedStrategy: TreeSelect.SHOW_ALL,\n    filterTreeNode: (input, treeNode) => {\n        return treeNode.props.title.toLowerCase()\n            .indexOf(input.toLowerCase()) >= 0;\n    },\n    optionFilterProp: \"label\", // 默认搜索label值\n};\n\nexport default TreeSelectComponent;\n","class Logger {\n    constructor() {\n        this._level = 0;\n        this._levels = ['nolog', 'log', 'debug', 'info', 'warn', 'error'];\n    }\n\n    log() {\n        this._print(1, arguments);\n    }\n\n    debug() {\n        this._print(2, arguments);\n    }\n\n    info() {\n        this._print(3, arguments);\n    }\n\n    warn() {\n        this._print(4, arguments);\n    }\n\n    error() {\n        this._print(5, arguments);\n    }\n\n    setLevel = (level) => {\n        this._level = level;\n    };\n\n    // 打印到控制台，将来可以收集到后端存储\n    _print = (level, args) => {\n        if (level <= this._level) return;\n        console[this._levels[level]](...args);\n        // report log\n    };\n}\n\nconst logger = new Logger();\n\nexport default logger;\n","/**\n * 统一消息管理, 将消息发送给所有订阅这个消息类型的模块\n * 采用 订阅/发布(观察者) 这种设计模块式开发\n */\nclass MsgCenter {\n    topicSubsMap = new Map();\n    uuid = 0;\n\n    _getUUID() {\n        return ++this.uuid;\n    }\n\n    publish(topic, resultObj) {\n        if (!this.topicSubsMap.has(topic)) {\n            return false;\n        }\n        let subscribers = this.topicSubsMap.get(topic);\n        subscribers.forEach((sub) => {\n            sub.func(topic, resultObj);\n        });\n        return true;\n    }\n\n    /**\n     * 订阅事件\n     * @param topic string | array\n     * @param func function(topic, event)\n     * @param uuid\n     * @returns {*|number}\n     */\n    subscribe(topic, func, uuid) {\n        uuid = uuid || this._getUUID();\n        if (Array.isArray(topic)) {\n            topic.forEach((item) => {\n                this.subscribe(item, func, uuid);\n            });\n            return uuid;\n        }\n        if (!this.topicSubsMap.has(topic)) {\n            this.topicSubsMap.set(topic, []);\n        }\n        this.topicSubsMap.get(topic).push({\n            token: uuid,\n            func: func\n        });\n        return uuid;\n    }\n\n    unsubscribe(token) {\n        for (let subs of this.topicSubsMap.values()) {\n            for (let i = 0; i < subs.length; i++) {\n                if (subs[i].token == token) {\n                    subs.splice(i--, 1);\n                }\n            }\n        }\n        return false;\n    }\n\n    reset() {\n        this.topicSubsMap.clear();\n    }\n}\n\nexport default new MsgCenter();\n","class Store {\n    constructor(opts) {\n        if (opts && opts.preKey) {\n            this.preKey = opts.preKey + '/';\n        } else {\n            this.preKey = '';\n        }\n    }\n\n    // TODO 暂不可用\n    clear() {\n        for (let i = 0; i <= localStorage.length - 1; i++) {\n            const key = localStorage.key(i);\n            if (key.indexOf(this.preKey) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    }\n\n    /**\n     * 清除当前用户(this.preKey)相关的主要信息\n     */\n    clearUserLocalStorage() {\n        const userInfos = ['userInfo',\n            'token',\n            'lastLoginTime',\n            'marketTradeDateMap' // 市场交易日期\n        ];\n        userInfos.forEach((key) => {\n            localStorage.removeItem(this.preKey + key);\n        });\n    }\n\n    getItem(key) {\n        let newKey = this.preKey + key;\n        return JSON.parse(localStorage.getItem(newKey));\n    }\n\n    setItem(key, data) {\n        let newKey = this.preKey + key;\n        localStorage.setItem(newKey, JSON.stringify(data));\n    }\n\n    removeItem(key) {\n        localStorage.removeItem(this.preKey + key);\n    }\n}\n\nexport default Store;\n","/**\n * Created by hegj on 2017/4/7.\n */\n// import { message } from 'antd';\n\n// const W3CWebSocket = require('websocket').w3cwebsocket;\nconst ApiConfig = require('config/api');\n\n\nclass WebSocket {\n    url;\n    config;\n\n    batchs = [];\n    isConnected = false;\n    subscribeMap = new Map();\n\n    // 心跳\n    lockReconnect = false;\n    allowReconnectNum = 10;     // 允许心跳重连的次数\n    curReconnectNum = 0;        // 当前已经发生的心跳重连的次数\n\n    constructor(site, wsUrl, params = {}, config = {}) {\n        this.url = this._makeURL(site, wsUrl, params);\n        this.config = config;\n        this._init();\n    }\n\n    /**\n     * 如果发送时间时，ws已经连接上了，直接发送，如果还没有连接，缓存要发送的数据，在连接之后再发送。\n     */\n    send = (params) => {\n        this.batchs.push(params);\n        if (this.isConnected) {\n            this._send();\n        }\n\n        if (typeof params == \"object\") {\n            const { op, msgType } = params;\n            if (op === \"subscribe\") {               // 订阅\n                if (!this.subscribeMap.has(msgType)) {\n                    this.subscribeMap.set(msgType, [params])\n                } else {\n                    let sub = this.subscribeMap.get(msgType);\n                    sub.push(params);\n                    this.subscribeMap.set(msgType, sub)\n                }\n            } else if (op === \"unsubscribe\") {      // 取消订阅\n                this.subscribeMap.delete(msgType);\n            }\n\n        }\n    }\n\n    _send = () => {\n        this.batchs.forEach((item) => {\n            this.client.send(JSON.stringify(item));\n        });\n        this.batchs = [];\n    }\n\n    sendSubscribe = () => {\n        if (this.subscribeMap.size) {\n            for (let [key, value] of this.subscribeMap) {\n                value.forEach((sub) => {\n                    this.client.send(JSON.stringify(sub))\n                })\n            }\n        }\n    }\n\n    _init() {\n        const wsUrl = this.url;\n        const token = '' + userLocalStore.getItem('token');\n        this.client = new window.WebSocket(wsUrl, [token]);\n\n        this.client.onerror = () => {\n            logger.error('Connection Error', wsUrl, arguments);\n            if (this.onerror) {\n                this.onerror(...arguments);\n            }\n            this.reconnect();   // 心跳重连\n        };\n        this.client.onopen = () => {\n            logger.info('Connection Success', wsUrl);\n            this.isConnected = true;\n            this._send();\n            if (this.onopen) {\n                this.onopen();\n            }\n\n            // 连接后要是之前页面有订阅的事件没有取消订阅，重新订阅\n            this.sendSubscribe();\n\n            // 心跳检测\n            this.heartCheck();\n        };\n        this.client.onclose = () => {\n            logger.info('Connection Closed', wsUrl);\n            if (this.onclose) {\n                this.onclose();\n            }\n            this.reconnect();   // 心跳重连\n        };\n        this.client.onmessage = (e) => {\n            if (this.onmessage) {\n                let json = JSON.parse(e.data);\n                this.onmessage(json);\n            }\n            // 如果获取到消息，心跳检测重置\n            // 拿到任何消息都说明当前连接是正常的\n            this.heartCheck();\n        };\n        this.close = () => {\n            this.client.close();\n        };\n    }\n\n    _makeURL = (site, wsUrl, params) => {\n        if (wsUrl.startsWith('ws://') || wsUrl.startsWith('wss://')) {\n            // concat search string\n            return this._concatSearch(wsUrl, params);\n        }\n        let returnUrl = '';\n        // concat domain base on ApiConfig\n        if (site in ApiConfig.domain) {\n            returnUrl += ApiConfig.domain[site];\n        } else {\n            returnUrl += ApiConfig.base + '/' + site;\n        }\n        // if ApiConfig.domain no a real domain string then create wss domain base on location host info manually\n        // location.host ==> 127.0.0.1:8888\n        // returnUrl /msgcenter ==> wss://127.0.0.1:8888/msgcenter\n        if (!returnUrl.startsWith('ws://') && !returnUrl.startsWith('wss://')) {\n            if (location.protocol === 'http:') {\n                returnUrl = `ws://${location.host}${returnUrl}`;\n            } else {\n                returnUrl = `wss://${location.host}${returnUrl}`;\n            }\n        }\n        // concat wsUrl to url\n        // wsUrl ==> /event/all\n        // returnUrl wss://127.0.0.1:8888/msgcenter ==> wss://127.0.0.1:8888/msgcenter/event/all\n        returnUrl += wsUrl;\n        // concat search string\n        // returnUrl wss://127.0.0.1:8888/msgcenter ==> wss://127.0.0.1:8888/msgcenter/event/all?search=???\n        return this._concatSearch(returnUrl, params);\n    };\n\n    _concatSearch = (url, params = {}) => {\n        let returnUrl = url;\n        let searchParams = new URLSearchParams();\n        // const userInfo = JSON.stringify(userLocalStore.getItem('userInfo'));\n        // const token = userLocalStore.getItem('token');\n        // searchParams.append('userInfo', userInfo);\n        // searchParams.append('token', token);\n        for (let p in params) {\n            const paramStr = JSON.stringify(params[p]);\n            searchParams.append(p, paramStr);\n        }\n        // 判断searchParams是否包含字符串信息\n        if (searchParams.toString().length > 0) {\n            if (returnUrl.includes('?')) {\n                returnUrl += '&' + searchParams;\n            } else {\n                returnUrl += '?' + searchParams;\n            }\n        }\n        return returnUrl;\n    };\n\n    /* -------------------- 添加心跳检测 -------------------- */\n    heartCheck = () => {\n        if (!this.config.heartCheck) return;\n        this.reset().start();\n    }\n\n    timeout = 30000; // 30秒\n    timeoutObj = null;\n    serverTimeoutObj = null;\n    reset = () => {\n        clearTimeout(this.timeoutObj);\n        clearTimeout(this.serverTimeoutObj);\n        return this;\n    };\n    start = () => {\n        this.timeoutObj = setTimeout(() => {\n            // 这里发送一个心跳，后端收到后，返回一个心跳消息，\n            // onmessage拿到返回的心跳就说明连接正常\n            this.client.send('{\"hello\": \"heart\"}');\n            this.serverTimeoutObj = setTimeout(() => { // 如果超过一定时间还没重置，说明后端主动断开了\n                this.client.close();\n            }, this.timeout);\n        }, this.timeout);\n    }\n\n    /**\n     * 重新连接\n     */\n    reconnect = () => {\n        if (this.lockReconnect) return;\n\n        // this.curReconnectNum++;\n        // // 限制重连的次数\n        // if (this.curReconnectNum >= this.allowReconnectNum) {\n        //     message.error('实时数据获取失败');\n        //     return;\n        // }\n\n        // 没连接上会一直重连，设置延迟避免请求过多\n        this.lockReconnect = true;\n        setTimeout(() => {\n            this._init();\n            this.lockReconnect = false;\n        }, 2000);\n    };\n}\n\nexport default WebSocket;\n","export { default as Tree } from './Tree';\nexport { default as TreeSelect } from './TreeSelect';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { Input, Popconfirm, Tree, Menu, Dropdown } from 'antd';\nimport { PropTypes as MobxPropTypes } from \"mobx-react\";\nimport _ from 'lodash';\nimport classnames from 'classnames';\nimport Util from 'utils/util';\n\nconst TreeNode = Tree.TreeNode;\nconst QUICK_SEARCH_DELAY = 300;  // 快速搜索延时\n\nclass SearchTreeComponent extends React.Component {\n  treeList = []; // 菜单数据 list = [{id1, name1}, {id2, name2}...]\n  treeDataCopy = []; // 菜单数据，树形结构\n\n  state = {\n    inputValue: '',\n    expandedKeys: [],\n    autoExpandParent: true\n  };\n  /**\n   * 模糊搜索框变化时触发\n   * 1. 重新设置 expandedKeys\n   * @param event\n   */\n  handleChange = (event) => {\n    // 一旦输入框有变化,则将模糊查找的字段设为有效\n    const value = event.target.value;\n    this._filterExpandedKeys(value);\n  }\n\n\n  /**\n   * 点击右键菜单节点操作按钮触发\n   */\n  handleItemClick = (info) => {\n    const { key } = info;\n    const { data } = info.item.props;\n    if (key === 'add') {\n      // 执行外围添加函数\n      this.props.onAddNode(data);\n    } else if (key === 'mod') {\n      // 执行外围编辑函数\n      this.props.onModNode(data);\n    } else if (key === 'open') {\n      this.props.onOpen(data);\n    } else {\n      // 非指定事件类型时统一触发事件\n      this.props.onContextMenuClick(key, data);\n    }\n  }\n  onDelNode = (data) => {\n    this.props.onDelNode(data);\n  }\n  /**\n   * 传递给rc-tree的选中节点回调方法\n   * @param selectedKeys\n   * @param info\n   */\n  onSelect = (selectedKeys, info) => {\n    // 执行外围函数\n    this.props.onSelect(info.node.props.data, selectedKeys);\n  }\n  /**\n   * 传递给rc-tree的折叠节点时回调方法\n   * @param expandedKeys\n   */\n  onExpand = (expandedKeys) => {\n    // 执行外围函数\n    this.props.onExpand(expandedKeys);\n\n    // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n    // or, you can remove all expanded chilren keys.\n    // 手动折叠标签时,将自动打开父标签属性设为否,否则会造成父标签无法折叠的bug\n    this.setState({\n      expandedKeys: expandedKeys,\n      autoExpandParent: false\n    });\n  }\n  onRightClick = (info) => {\n    const { rightable } = this.props;\n    if (!rightable) return;\n    this.renderRightClickMenu(info);\n    window.getSelection().removeAllRanges();\n  }\n  /**\n   * 渲染右键菜单\n   */\n  renderRightClickMenu(info) {\n    if (this.dropdown) {\n      ReactDOM.unmountComponentAtNode(this.cmContainer);\n      this.dropdown = null;\n    }\n    const item = info.node.props;\n    const itemData = item.data;\n    const { disabledContext } = item.data;\n    if (disabledContext) return null;\n    const contextMenuKeys = itemData.contextMenuKeys || [\"mod\", \"add\", \"del\", \"open\"];\n    const defaultContextMenuMap = new Map([\n      [\"mod\", <Menu.Item key=\"mod\" data={itemData}>编辑</Menu.Item>],\n      [\"add\", <Menu.Item key=\"add\" data={itemData}>添加</Menu.Item>],\n      [\"open\", <Menu.Item key=\"open\" data={itemData}>打开</Menu.Item>],\n      [\"del\", (\n        <Menu.Item key=\"del\" data={itemData}>\n          <Popconfirm\n            placement=\"topLeft\"\n            title=\"是否删除该节点?\"\n            onConfirm={() => { this.onDelNode(itemData); }}\n            okText=\"是\"\n            cancelText=\"否\"\n          >\n            <div>删除</div>\n          </Popconfirm>\n        </Menu.Item>\n      )]\n    ]);\n    // 定义每个节点的下拉菜单\n    const menu = (\n      <Menu className=\"treenode-context-menu\" onClick={this.handleItemClick}>\n        {contextMenuKeys.map((iconKey) => {\n          let action = iconKey;\n          if (typeof iconKey === \"object\") {\n            if (!defaultContextMenuMap.has(iconKey.action)) {\n              // 自定义渲染菜单项\n              return <Menu.Item key={iconKey.action} data={itemData}>{iconKey.name}</Menu.Item>;\n            }\n            action = iconKey.action;\n          }\n          // 从默认的右键菜单项数组中生成 MenuItem\n          return defaultContextMenuMap.get(action);\n        })}\n      </Menu>\n    );\n    this.dropdown = (\n      <Dropdown overlay={menu} placement=\"bottomLeft\" trigger={['click']} defaultVisible >\n        <span></span>\n      </Dropdown>\n    );\n\n    const container = this.getContainer();\n    Object.assign(this.cmContainer.style, {\n      position: 'absolute',\n      left: `${info.event.pageX}px`,\n      top: `${info.event.pageY}px`,\n    });\n\n    ReactDOM.render(this.dropdown, container);\n  }\n  getContainer() {\n    if (!this.cmContainer) {\n      this.cmContainer = document.createElement('div');\n      document.body.appendChild(this.cmContainer);\n    }\n    return this.cmContainer;\n  }\n  /**\n   * 拖拽树节点\n   * @param info\n   */\n  onDrop = (info) => {\n    const { node, dragNode, dropToGap, dropPosition } = info;\n    const targetNodeData = node.props.data;   // 目标节点\n    const dragNodeData = dragNode.props.data; // 操作节点\n    let dropType = '';\n    if (dropToGap) {\n      if (dropPosition <= 0) {\n        dropType = 'prev';\n      } else {\n        dropType = 'next';\n      }\n    } else {\n      dropType = 'inner';\n    }\n    this.props.onDrop(dragNodeData, targetNodeData, dropType);\n  }\n\n\n  /**\n   * 过滤包含搜索值的菜单项（获取设置展开项）\n   * @param value search input 输入值\n   */\n  _filterExpandedKeys = _.debounce((value) => {\n    let expandedKeys = [];\n\n    if (value) {\n      expandedKeys = this.treeList.map((item) => {\n        if (item.name.indexOf(value) > -1) {\n          return this._getParentKey(item.id, this.treeDataCopy);\n        }\n        return null;\n      }).filter((item, i, self) => {\n        return item && self.indexOf(item) === i;\n      });\n    }\n    this.setState({\n      inputValue: value,\n      expandedKeys,\n      autoExpandParent: true\n    });\n  }, QUICK_SEARCH_DELAY);\n\n  /**\n   * 获取包含搜索值的子项的父节点 id\n   * @param id 当前项的 id\n   * @param tree 树形结构数据\n   */\n  _getParentKey = (id, tree) => {\n    let parentKey;\n    for (let i = 0; i < tree.length; i++) {\n      const node = tree[i];\n      if (node.items) {\n        if (node.items.some((item) => { return item.id == id; })) {\n          parentKey = node.id;\n        } else if (this._getParentKey(id, node.items)) {\n          parentKey = this._getParentKey(id, node.items);\n        }\n      }\n    }\n    return parentKey;\n  };\n\n  renderTreeNode = (config) => {\n    const { addDiyClass, addDiyDom } = this.props.treeNodeConfig;\n    const { inputValue } = this.state;\n    const { treeData } = config;\n    return treeData.map((item) => {\n      const key = `${item.id}`; // 对key的操作均为字符串类型,应转成字符串\n      const name = item.name; // 指定 name 作为模糊搜索过滤字段\n      const itemData = item.data;\n\n      // 标红含有搜索值的子项\n      const index = name.indexOf(inputValue);\n      const beforeStr = name.substr(0, index);\n      const afterStr = name.substr(index + inputValue.length);\n\n      // 通过Dropdown组件包装使hover时自动下拉\n      const title = (\n        <span title={name}>\n          <span className=\"title\">\n            {\n              index > -1 ? <span>\n                {beforeStr}\n                <span className=\"text-danger\">{inputValue}</span>\n                {afterStr}\n              </span> : <span>{name}</span>\n            }\n          </span>\n          {(_.isFunction(addDiyDom) && addDiyDom(itemData)) || null}\n        </span>\n      );\n      const treeNodeClassName = classnames({\n        [(_.isFunction(addDiyClass) && addDiyClass(itemData))]: (_.isFunction(addDiyClass) && addDiyClass(itemData)),\n        \"tree-node-item\": true,\n      });\n\n      const treeNodeProps = {\n        key: key,\n        searchKey: name,\n        title: title,\n        data: itemData,\n        disabled: itemData.disabled,\n        disableCheckbox: itemData.disableCheckbox,\n        className: treeNodeClassName\n      };\n      if (item.items) {\n        return (\n          <TreeNode {...treeNodeProps}>\n            {this.renderTreeNode(_.assign({}, config, {\n              treeData: item.items\n            }))}\n          </TreeNode>\n        );\n      }\n      return <TreeNode {...treeNodeProps} />;\n    });\n  };\n  render() {\n    // render TreeNode\n    // 简化变量名\n    let { treeData, showSearch, ...extra } = this.props;\n    const { expandedKeys, autoExpandParent } = this.state;\n    // 过滤掉隐藏的节点\n    treeData = treeData.filter((item) => {\n      if (!item.hidden) {\n        this.treeList.push({ // 保存一份 tree 数据的 list(非树形结构)\n          id: item.id,\n          name: item.name\n        });\n      }\n      return !item.hidden;\n    });\n    treeData = Util.toTreeData(treeData);\n    this.treeDataCopy = treeData; // 将处理成树形结构的数据保存一份在实例上，搜索时需要用到\n\n    const props = {\n      onExpand: this.onExpand,\n      expandedKeys: expandedKeys,\n      autoExpandParent: autoExpandParent,\n      onSelect: this.onSelect,\n      onRightClick: this.onRightClick, // 如果 props 中设置了 rightable 为 true 时则传入右键事件, 默认不传入\n      onDrop: this.onDrop\n    };\n\n    const treeNode = this.renderTreeNode({\n      treeData\n    });\n    return (\n      <div className={`tree-content ${!showSearch ? 'tree-content-without-search' : ''}`}>\n        {showSearch && <Input placeholder=\"搜索节点\" onChange={this.handleChange} size=\"small\" />}\n        <Tree {...extra} {...props}>\n          {treeNode}\n        </Tree>\n      </div>\n    );\n  }\n}\n\nSearchTreeComponent.propTypes = {\n  title: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.string\n  ]),\n  treeData: PropTypes.oneOfType([\n    PropTypes.array,\n    MobxPropTypes.observableArray\n  ]).isRequired,\n  showSearch: PropTypes.bool,\n  rightable: PropTypes.bool,\n  onAddNode: PropTypes.func,\n  onModNode: PropTypes.func,\n  onDelNode: PropTypes.func,\n  onRightClick: PropTypes.func,\n  onItemClick: PropTypes.func,\n  treeNodeConfig: PropTypes.object,\n};\n\nSearchTreeComponent.defaultProps = {\n  // ================== Custom-Tree-props ==================\n  showSearch: true,\n  rightable: false, // 是否开启右键点击事件\n  onAddNode: () => { },\n  onModNode: () => { },\n  onDelNode: () => { },\n  onOpen: () => { },\n  // ================ Custom-TreeNode-props ================\n  // 以下属性均要加到每个节点数据中,而不是直接加在Tree组件的props中\n  treeNodeConfig: { // 给每个树节点扩展自定义配置\n    addDiyClass: () => { }, // 给每个节点添加自定义样式类, 要求函数返回值为 string\n    addDiyDom: () => { }, // 给每个节点追加自定义内容, 要求函数返回值为 ReactNode\n  },\n  // =================== Ant-Tree-props ====================\n  // 蚂蚁提供的配置项\n  treeData: [],\n  showLine: true, // 默认显示连线\n  onSelect: () => { },\n  onExpand: () => { },\n  onDrop: () => { },\n  onContextMenuClick: () => { } // 右键菜单时间\n};\n\nexport default SearchTreeComponent;\n","export { default as logger } from './logger';\nexport { default as msgCenter } from './MsgCenter';\nexport { default as Store } from './Store';\nexport { default as Util } from './util';\nexport { default as IndexedDB } from './IndexedDB';\nexport { default as WebSocket } from './WebSocket';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tree\":\"tree-3xiZQSq4\",\"header\":\"header-1Ixz42rj\",\"simple-tree\":\"simple-tree-1uu8ts3v\"};"," /**\n * 1. 定义数据库相关的变量\n * 2. 初始化数据库 database\n * 3. 创建数据表 objectStore\n * 4. 删除数据表\n * 4. 增加记录 object\n * 5. 修改记录\n * 6. 删除记录\n * stores - objectStore - tables\n * storeName - storeNames\n */\nlet _db = null;\nconst _dbName = 'ibor_db'; // test_db数据库\nconst _dbVersion = 1;\nconst T_CUSTOM_TABLE = \"read_table\"; // test 表\n\n/**\n * 相当于建表和定义表结构\n * @param {*} db 数据库\n * @param {*} storeName 表名（objectStore name)\n */\nconst _initStore = (db, storeName) => {\n  if (db.objectStoreNames.contains(storeName)) {\n    return;\n  }\n  let objectStore = db.createObjectStore(storeName, {\n    keyPath: \"id\",\n    autoIncrement: false\n  });\n  objectStore.createIndex(\"name\", \"name\", {\n    unique: false\n  });\n};\n\n/**\n * 初始化 IndexedDB\n */\nconst initIndexedDB = (cb) => {\n  // 获取到indexedDB实例,若为新（子）窗口，则取父窗口的 indexedDB 实例(保证只打开一次 indexedDB)\n  let indexedDB = window.indexedDB;\n  if (indexedDB.IBORDB) {\n    return;\n  }\n  // 初始IndexDB\n  let request = indexedDB.open(_dbName, _dbVersion);\n  request.onerror = function (e) {\n    console.log('error to open DB', e);\n  };\n  request.onsuccess = function (e) {\n    console.log(\"success to open DB\");\n    _db = e.target.result;\n    indexedDB.IBORDB = _db;\n    cb && cb();\n  };\n  request.onupgradeneeded = function (e) {\n    let db = e.target.result;\n    _initStore(db, T_CUSTOM_TABLE); // 创建 objectStore\n  };\n};\n\n/**\n * 返回 storeName 对应的 table(objectStore)\n * @param {*} storeName 表名\n * @param {*} mode 模式\n */\nconst _store = (storeName, mode = 'readwrite') => {\n  return new Promise((resolve) => {\n    let dbInstance = window.indexedDB.IBORDB || window.opener.indexedDB.IBORDB; // 在子窗口操作 indexedDB\n      console.log(dbInstance.transaction([storeName], mode), '4444444444');\n     let objectStore = dbInstance.transaction([storeName], mode).objectStore(storeName);\n    resolve(objectStore);\n  });\n};\n\n/**\n * 清空数据表数据（objectStore）\n * @param {*} storeName\n */\nconst clearStore = (storeName) => {\n  _store(storeName).then((objectStore) => {\n    objectStore.clear();\n  });\n};\n\n/**\n * 1. 校验\n * 2. 执行插入\n * 3. 返回 promise 格式：result = { code: 200/500, data: {}， msg: “” }\n * @param {*} storeName 表名\n * @param {*} data 插入的数据\n */\nconst insertData = (storeName, data) => {\n  return new Promise((resolve, reject) => {\n    _store(storeName).then((objectStore) => {\n      let request = objectStore.add(data);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = (e) => {\n        reject(e);\n      };\n    }).catch((e) => {\n      reject(e);\n    });\n  });\n};\n\n/**\n * 获取表中相应数据\n * @param {*} storeName 表名\n * @param {*} key 对应数据表记录\n * 1. 校验\n * 2. 取数据\n * 3. 返回\n */\nconst getDataByKey = (storeName, key) => {\n  return new Promise((resolve, reject) => {\n    _store(storeName).then((objectStore) => {\n      let request = objectStore.get(key);\n      request.onsuccess = (e) => {\n        resolve(e.target.result);\n      };\n      request.onerror = (e) => {\n        reject(e);\n      };\n    }).catch((e) => {\n      reject(e);\n    });\n  });\n};\n\n/**\n * 更新表数据\n * @param {*} storeName 表名\n * @param {*} data 更新数据记录\n */\nconst updateData = (storeName, data) => {\n  return new Promise((resolve, reject) => {\n    _store(storeName).then((objectStore) => {\n      let request = objectStore.put(data);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = (e) => {\n        reject(e);\n      };\n    })\n    .catch((e) => {\n      reject(e);\n    });\n  });\n};\n\n/**\n * 删除一条记录\n * @param {*} storeName\n * @param {*} key\n */\nconst deleteData = (storeName, key) => {\n  return new Promise((resolve, reject) => {\n    _store(storeName).then((objectStore) => {\n      let request = objectStore.delete(key);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = (e) => {\n        reject(e);\n      };\n    }).catch((e) => {\n      reject(e);\n    });\n  });\n};\n\n/**\n * 查询该 objectStore 所有数据记录\n * @param {*} storeName 表名\n */\nconst queryData = (storeName) => {\n    console.log(storeName, '55555555');\n  return new Promise((resolve, reject) => {\n    _store(storeName).then((objectStore) => {\n      let request = objectStore.openCursor();\n      let results = [];\n      request.onsuccess = (e) => {\n        let cursor = e.target.result;\n        if (cursor) {\n          results.push(cursor.value);\n          cursor.continue();\n        } else {\n          resolve(results);\n        }\n      };\n      request.onerror = (e) => {\n        reject(e);\n      };\n    }).catch((e) => {\n      reject(e);\n    });\n  });\n};\n\nconst wrapperTableName = (tableName) => {\n  return {\n    insertData: (...args) => { return insertData(tableName, ...args); }, // 插入一条数据\n    getDataByKey: (...args) => { return getDataByKey(tableName, ...args); }, // 根据 key 获取一条数据\n    updateData: (...args) => { return updateData(tableName, ...args); }, // 更新一条数据\n    deleteData: (...args) => { return deleteData(tableName, ...args); }, // 删除一条数据\n    queryData: () => { return queryData(tableName); }, // 查询表数据\n    clearStore: () => { clearStore(tableName); } // 清空表数据\n  };\n};\n\nexport {\n  initIndexedDB,\n  wrapperTableName\n};\n\nexport default {\n  initIndexedDB,\n  wrapperTableName\n};\n"],"sourceRoot":""}