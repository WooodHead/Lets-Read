{"version":3,"sources":["webpack:///./app/utils/util/index.js","webpack:///./app/utils/MsgCenter/index.jsx","webpack:///./app/utils/IndexedDB/index.js","webpack:///./app/utils/API/index.js","webpack:///./app/components/Tree/index.jsx","webpack:///./app/components/TreeSelect/index.jsx","webpack:///./app/components/index.js","webpack:///./app/components/Tree/SearchTree.jsx","webpack:///./app/utils/index.js","webpack:///./app/utils/API/api.js","webpack:///./app/components/Tree/index.scss"],"names":["toTreeData","dataList","config","items","item","idMap","expand","i","length","row","Object","assign","id","name","data","pId","push","pitem","children","extProp","_extendTreeDataProp","forEach","p","val","Array","analysisUrlSearch","search","pathParams","split","Map","result","map","isArrayEqual","arr1","arr2","_toRealArray","convertArray","MobX","isObservableArray","slice","_","isEqual","valuesToStrings","values","isUndefined","isInteger","isString","value","generateHash","input","I64BIT_TABLE","hash","charCodeAt","retValue","_parseItemValue","dataType","formatDate","date","format","e","logger","error","toString","getDateStamp","stampType","set","valueOf","isRange","buildFilterParams","args","buildFieldRule","key","fields","vals","field","$$index","indexOf","dateType","substring","$index","op","endsWith","_params","filterGroup","groups","rules","searchRule","orGroups","isArray","orParamsItem","newGroupItem","orKey","mapPropsToFields","parseFieldValue","fieldObj","fieldConfig","noExpand","moment","isEmpty","trueValue","getFieldValue","rangeIndex","realKey","innerField","replace","substr","lastIndexOf","getFieldName","arrValues","createFormField","entries","entry","buildFormData","formData","_formData","tempValue","temp","formatYYYYMMDD","Date","MsgCenter","topicSubsMap","uuid","this","topic","resultObj","has","get","sub","func","_getUUID","subscribe","token","subs","splice","clear","_initStore","db","storeName","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","createIndex","unique","initIndexedDB","cb","indexedDB","window","IBORDB","request","open","_dbName","onerror","onsuccess","_db","target","onupgradeneeded","T_CUSTOM_TABLE","_store","mode","Promise","resolve","opener","transaction","objectStore","clearStore","then","insertData","reject","add","catch","getDataByKey","updateData","put","deleteData","delete","queryData","openCursor","results","cursor","continue","wrapperTableName","tableName","ApiConfig","require","API","props","_config","undefined","site","base","prefix","urlPrefix","url","params","match","method","paramsCopy","JSON","parse","stringify","includes","returnUrl","domain","_replaceUrl","searchParams","URLSearchParams","paramStr","append","urlInfo","_makeURL","reqUrl","timeout","restParams","headers","Headers","multipart","Request","body","st","promise","fetch","response","ok","json","Error","clearTimeout","abortFn","abortDelay","abortPromise","code","msg","res","abortablePromise","race","setTimeout","loading","delayLoading","_request","styles","TreeComponent","state","treeData","shouldUpdateWhenMainPropsChange","nextProps","treeUrl","treeParams","Util","shouldUpdateWhenStateChange","nextState","initTreeData","setTreeData","setState","getUrlParams","query","handleRefresh","onRefresh","getTreeData","updateWhenMainPropsChange","showFrame","hiddenValues","disabledValues","disableCheckboxValues","title","preHandleTreeData","defaultCheckedKeys","checkedKeys","defaultExpandedKeys","expandedKeys","defaultSelectedKeys","selectedKeys","treeFrameClass","classNames","tree","hidden","disabled","disableCheckbox","className","header","type","onClick","React","Component","propTypes","PropTypes","bool","array","string","object","treeSite","preHandleData","defaultProps","TreeSelectComponent","inputValue","onChange","label","extra","log","onSearch","handleTreeData","shouldDisableCheckbox","filter","isFunction","multiple","forceUpdateTree","notFoundContent","forceUpdate","defaultValue","treeDefaultExpandedKeys","treeDataLength","size","style","width","oneOfType","MobxPropTypes","observableArray","showSearch","showCheckedStrategy","SHOW_ALL","filterTreeNode","treeNode","toLowerCase","optionFilterProp","TreeNode","QUICK_SEARCH_DELAY","SearchTreeComponent","treeList","treeDataCopy","autoExpandParent","handleChange","event","_filterExpandedKeys","handleItemClick","info","onAddNode","onModNode","onOpen","onContextMenuClick","onDelNode","onSelect","node","onExpand","onRightClick","rightable","renderRightClickMenu","getSelection","removeAllRanges","onDrop","dragNode","dropToGap","dropPosition","targetNodeData","dragNodeData","dropType","debounce","_getParentKey","self","parentKey","some","renderTreeNode","treeNodeConfig","addDiyClass","addDiyDom","itemData","index","beforeStr","afterStr","treeNodeClassName","classnames","treeNodeProps","searchKey","dropdown","ReactDOM","unmountComponentAtNode","cmContainer","disabledContext","contextMenuKeys","defaultContextMenuMap","Item","placement","onConfirm","okText","cancelText","menu","iconKey","action","overlay","trigger","defaultVisible","container","getContainer","position","left","pageX","top","pageY","render","document","createElement","appendChild","placeholder","element","isRequired","onItemClick","showLine","auth","module","exports"],"mappings":"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","file":"assets/js/components_67a8cc0b.chunk.js","sourcesContent":["/**\r\n * 工具库，专用于处理数据转化\r\n */\r\nimport MobX from 'mobx';\r\nimport { Form } from 'antd';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\n\r\nconst toTreeData = (dataList = [], config = {}) => {\r\n    const _extendTreeDataProp = (items, extProp = {}) => {\r\n        items.forEach((item) => {\r\n            const children = config.expand ? item.children : item.items;\r\n            for (let p in extProp) {\r\n                const val = extProp[p];\r\n                if (typeof val === 'function') {\r\n                    item[p] = val(item);\r\n                } else {\r\n                    item[p] = val;\r\n                }\r\n                if (children instanceof Array) {\r\n                    _extendTreeDataProp(children, extProp);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    let items = [];\r\n    let item = null;\r\n    let idMap = {}; // key:id,value:item\r\n    const { expand = false } = config; // 标记是否在处理时将数据平铺\r\n    // 将所有的菜单保存到idMap,如果是一级菜单，还要存放到items数组\r\n    for (let i = 0; i < dataList.length; i++) {\r\n        let row = dataList[i];\r\n        item = {};\r\n        if (expand) { // 支持对象属性平铺，也即不要将剩余的属性放到data数量里面\r\n            Object.assign(item, row);\r\n            item.id = `${row.id}`;\r\n        } else {\r\n            item.id = `${row.id}`;\r\n            item.name = row.name;\r\n            item.data = Object.assign({}, row);\r\n        }\r\n\r\n        if (row.id == row.pId || !row.pId || row.pId == \"0\") {\r\n            items.push(item);\r\n        }\r\n        idMap[row.id] = item;\r\n    }\r\n    // 遍历所有的非一级菜单，找到它们的父节点，并存放到父节点的items属性下\r\n    for (let i = 0; i < dataList.length; i++) {\r\n        let row = dataList[i];\r\n        if (row.id == row.pId || !row.pId || row.pId == \"0\") {\r\n            continue;\r\n        }\r\n        let pitem = idMap[row.pId];\r\n        item = idMap[row.id];\r\n        if (pitem) {\r\n            if (expand) {\r\n                if (!pitem.children) {\r\n                    pitem.children = [];\r\n                }\r\n                pitem.children.push(item);\r\n            } else {\r\n                if (!pitem.items) {\r\n                    pitem.items = [];\r\n                }\r\n                pitem.items.push(item);\r\n            }\r\n        }\r\n    }\r\n    // 根据配置增加属性\r\n    if (config.extProp) {\r\n        _extendTreeDataProp(items, config.extProp);\r\n    }\r\n\r\n    return items;\r\n};\r\n\r\n/**\r\n * 解析url的search，返回kv对\r\n */\r\nconst analysisUrlSearch = (search) => {\r\n    let pathParams = search.split('?')[1];\r\n    if (!pathParams) return new Map();\r\n\r\n    let pathParamsArr = pathParams.split('&');\r\n    let result = pathParamsArr.map((item) => {\r\n        return item.split('=');\r\n    });\r\n\r\n    return new Map(result);\r\n};\r\n\r\n/**\r\n * 使用 lodash 对比两个真实数组是否相同\r\n * 由于 ims 系统当中引用了 mobx 的观察者开发模式\r\n * 所以在使用被观察数组数据时要将其转为正常数组再进行其他操作\r\n * @param arr1\r\n * @param arr2\r\n * @returns {boolean}\r\n */\r\nconst isArrayEqual = (arr1, arr2) => {\r\n    const _toRealArray = (convertArray = []) => {\r\n        if (MobX.isObservableArray(convertArray)) {\r\n            return convertArray.slice();\r\n        } else {\r\n            return convertArray;\r\n        }\r\n    };\r\n    return _.isEqual(_toRealArray(arr1), _toRealArray(arr2));\r\n};\r\n\r\n/**\r\n * 将单个值或某个数组内的所有值转成字符串\r\n * 主要是为了兼容外部传入 value/defaultValue 等值时可以直接传数字类型\r\n * @param values\r\n * @returns {*}\r\n */\r\nconst valuesToStrings = (values) => {\r\n    // 如果是空，则返回\r\n    if (values === null) {\r\n        return values;\r\n    }\r\n    if (!_.isUndefined(values)) {\r\n        if (_.isInteger(values)) { // 数字类型直接转成字符类型\r\n            values += '';\r\n        } else if (!_.isString(values)) { // 非数字非字符类型, 剩下的类型视为数组类型 Array | ObservableArray\r\n            values = values.map((value) => { // 将数组内所有值转成字符类型\r\n                if (typeof value === 'object') {\r\n                    return value; // 如果项为对象则直接返回\r\n                }\r\n                return value + '';\r\n            });\r\n        }\r\n    }\r\n    return values;\r\n};\r\n\r\n/**\r\n * 用于生成 input 的值对应的唯一哈希值\r\n * @param input\r\n * @return {string}\r\n */\r\nconst generateHash = (input) => {\r\n    let I64BIT_TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-'.split('');\r\n    let hash = 5381;\r\n    let i = input.length - 1;\r\n\r\n    if (typeof input === 'string') {\r\n        for (input.length - 1; i > -1; i--) {\r\n            hash += (hash << 5) + input.charCodeAt(i);\r\n        }\r\n    } else {\r\n        for (; i > -1; i--) {\r\n            hash += (hash << 5) + input[i];\r\n        }\r\n    }\r\n\r\n    let value = hash & 0x7FFFFFFF;\r\n    let retValue = '';\r\n\r\n    do {\r\n        retValue += I64BIT_TABLE[value & 0x3F];\r\n    }\r\n    while (value >>= 6);\r\n\r\n    return retValue;\r\n};\r\n\r\n// 解析参数\r\nconst _parseItemValue = (value, dataType) => {\r\n    const dateStart = \"start\";\r\n    const dateEnd = \"end\";\r\n    const formatDate = (date, format) => {\r\n        try {\r\n            return date.format(format);\r\n        } catch (e) {\r\n            logger.error('parse value error', date, dataType);\r\n            return date && date.toString();\r\n        }\r\n    };\r\n\r\n    const getDateStamp = (date, stampType) => {\r\n        try {\r\n            switch (stampType) {\r\n                case dateStart:\r\n                    return date.set({ 'hour': 0, 'minute': 0, 'second': 0, 'millisecond': 0 })\r\n                        .valueOf();\r\n                case dateEnd:\r\n                    return date.set({ 'hour': 23, 'minute': 59, 'second': 59, 'millisecond': 999 })\r\n                        .valueOf();\r\n                default:\r\n                    return date.valueOf();\r\n            }\r\n        } catch (e) {\r\n            logger.error('parse value error', date, dataType);\r\n            return date && date.toString();\r\n        }\r\n    };\r\n\r\n    let format = null;\r\n    let isRange = false;\r\n    switch (dataType) {\r\n        case 'array':\r\n            if (!(value instanceof Array)) {\r\n                value = [value];\r\n            }\r\n            return value;\r\n        case 'boolean':\r\n            return value ? 1 : 0;\r\n        case 'daterange':\r\n            isRange = true;\r\n        case 'date':\r\n            format = 'YYYY-MM-DD';\r\n            break;\r\n        case 'datetimerange':\r\n            isRange = true;\r\n        case 'datetime':\r\n            format = \"YYYY-MM-DD HH:mm:ss\";\r\n        case 'timerange':\r\n            isRange = true;\r\n        case 'time':\r\n            // 日期类型格式化\r\n            format = \"HH:mm:ss\";\r\n        case 'timestamprange':\r\n            isRange = true;\r\n            break;\r\n        case 'timestamp':\r\n            return getDateStamp(value);\r\n        case 's_timestamp':\r\n            return getDateStamp(value, dateStart);\r\n        case 'e_timestamp':\r\n            return getDateStamp(value, dateEnd);\r\n        case 'datestamp':\r\n            return getDateStamp(value);\r\n        default:\r\n            logger.error('not support this type ', dataType);\r\n            return value;\r\n    }\r\n\r\n    // 如果是范围格式的\r\n    if (isRange) {\r\n        if (value instanceof Array) {\r\n            if (!format) {\r\n                return value.map((item) => {\r\n                    return getDateStamp(item);\r\n                });\r\n            } else {\r\n                return value.map((item) => {\r\n                    return formatDate(item, format);\r\n                });\r\n            }\r\n        } else {\r\n            logger.error('parse value error', value, dataType);\r\n            return value;\r\n        }\r\n    } else {\r\n        return formatDate(value, format);\r\n    }\r\n};\r\n\r\n// 对象变参，每一个都是一个key-valule形式的对象\r\nconst buildFilterParams = (...args) => {\r\n    const buildFieldRule = (key, value) => {\r\n        const fields = key.split(\"-\");\r\n        const vals = [];\r\n        if (fields.length === 1) {\r\n            vals.push(value);\r\n        } else {\r\n            vals.push(...value);\r\n        }\r\n        return fields.map((field, i) => {\r\n            let $$index = field.indexOf('$$');\r\n            if ($$index > -1) {\r\n                // 需再次解析的字段，例如 startTime$lte$$timestamp@date\r\n                // 根据@后面的数据类型解析\r\n                let dateType = field.substring($$index + 2); // timestamp@date\r\n                value = _parseItemValue(vals[i], dateType);\r\n                field = field.substring(0, $$index); // startTime$lte\r\n            } else {\r\n                value = vals[i];\r\n            }\r\n            let $index = field.indexOf('$');\r\n            let op = 'eq';\r\n            if ($index > -1) {\r\n                op = field.substring($index + 1); // lte\r\n                if (op.endsWith('Ex')) { // status$inEx => status$in\r\n                    op = op.substring(0, op.length - 2);\r\n                }\r\n                field = field.substring(0, $index); // startTime\r\n            }\r\n            return { field: field, op: op, value: value };\r\n        });\r\n    };\r\n\r\n    const _params = _.assign({}, ...args);\r\n    const filterGroup = { op: 'and', groups: [{ op: 'and', rules: [] }] };\r\n    const searchRule = {};\r\n    for (let key in _params) {\r\n        switch (key) {\r\n            case 'page':\r\n            case 'pageSize':\r\n            case 'orderBy':\r\n            case 'distinct':\r\n                // 分页或者排序字段\r\n                searchRule[key] = _params[key];\r\n                break;\r\n            case '$$or':\r\n                const orGroups = { op: 'or', groups: [] };\r\n                filterGroup.groups.push(orGroups);\r\n                const orParams = _.isArray(_params[key]) ? _params[key] : [_params[key]]; // convert to Array\r\n                orParams.forEach((orParamsItem) => {\r\n                    const newGroupItem = { op: 'and', rules: [] };\r\n                    orGroups.groups.push(newGroupItem);\r\n                    for (let orKey in orParamsItem) {\r\n                        newGroupItem.rules.push(...buildFieldRule(orKey, orParamsItem[orKey]));\r\n                    }\r\n                });\r\n                break;\r\n            default:\r\n                const value = _params[key];\r\n                if (value != null) {\r\n                    filterGroup.groups[0].rules.push(...buildFieldRule(key, value));\r\n                }\r\n        }\r\n    }\r\n\r\n    return { filterGroup, searchRule };\r\n};\r\n\r\n// 表单参数解析\r\nconst mapPropsToFields = (data = {}, config = {}) => {\r\n    const getFieldValue = (val, fieldConfig) => {\r\n        const { dataType, format } = fieldConfig;\r\n        switch (dataType) {\r\n            case 'date':\r\n            case 'datetime':\r\n            case 'time':\r\n            case 'timestamp':\r\n            case 's_timestamp':\r\n            case 'e_timestamp':\r\n            case 'datestamp':\r\n            case 'daterange':\r\n            case 'datetimerange':\r\n            case 'timerange':\r\n            case 'timestamprange':\r\n                try {\r\n                    if (format) {\r\n                        return moment(val, format);\r\n                    } else {\r\n                        return moment(val);\r\n                    }\r\n                } catch (e) {\r\n                    logger.error('propToFieldValue error', val, fieldConfig);\r\n                    return val;\r\n                }\r\n            case 'array':\r\n            case 'arrayStr':\r\n                return _.isEmpty(val) ? [] : val.split(\",\");\r\n            case 'boolean':\r\n                const { trueValue = 1 } = fieldConfig;\r\n                return val === trueValue;\r\n            default:\r\n                logger.error('not support this type ', dataType);\r\n                return val;\r\n        }\r\n    };\r\n    // 获取参数名\r\n    const getFieldName = (key, fieldConfig) => {\r\n        let { field, innerField, dataType } = fieldConfig;\r\n        if (field) {\r\n            // field = 'def'\r\n            // key = 'abc' => 'def'\r\n            return field;\r\n        }\r\n        if (innerField) {\r\n            // field = 'taskId'\r\n            // key = 'id' => 'taskId'\r\n            // key = 'tasks[0].id' => 'tasks[0].taskId'\r\n            if (key.indexOf('.') > -1) {\r\n                // 此处使用 replace 替换时如果出现 $$ 字符会被认为是直接量符号，因为先将匹配的字符串替换为空再加上 innerField\r\n                return _.replace(key, key.substr(_.lastIndexOf(key, '.') + 1), '') + innerField;\r\n            } else {\r\n                return innerField;\r\n            }\r\n        }\r\n        if (dataType) {\r\n            return key + '$$' + dataType;\r\n        }\r\n        return key;\r\n    };\r\n\r\n    const parseFieldValue = (fieldObj, key, value, fieldConfig) => {\r\n        // 在 fieldConfig.noExpand 属性值不为真的情况下 且 值是数组或者对象，需解析成 a[0].b = 1 或者 c.d = 1的形式\r\n        if (!(fieldConfig && fieldConfig.noExpand) && typeof value === 'object') {\r\n            if (value instanceof Array) { // a:[{b:1}] => a[0].b = 1\r\n                for (let i = 0; i < value.length; i++) {\r\n                    let newKey = key + '[' + i + ']';\r\n                    parseFieldValue(fieldObj, newKey, value[i], fieldConfig && fieldConfig[i]);\r\n                }\r\n            } else { // Object a:{b:1} => a.b = 1\r\n                for (let p in value) {\r\n                    let newKey = key + '.' + p;\r\n                    parseFieldValue(fieldObj, newKey, value[p], fieldConfig && fieldConfig[p]);\r\n                }\r\n            }\r\n        } else { // string/number/...\r\n            if (fieldConfig) {\r\n                let val = getFieldValue(value, fieldConfig);\r\n                const { field = key, rangeIndex } = fieldConfig;\r\n                let realKey = getFieldName(key, fieldConfig);\r\n                if (field) {\r\n                    if (rangeIndex != null) {\r\n                        let { [realKey]: arrValues = { value: [] } } = fieldObj;\r\n                        arrValues.value[rangeIndex] = val;\r\n                        fieldObj[realKey] = Form.createFormField(arrValues);\r\n                    } else {\r\n                        fieldObj[realKey] = Form.createFormField({ value: val });\r\n                    }\r\n                }\r\n            } else {\r\n                fieldObj[key] = Form.createFormField({ value: value });\r\n            }\r\n        }\r\n    };\r\n\r\n    let fieldObj = {};\r\n    let entries = Object.entries(data);\r\n    for (let entry of entries) {\r\n        let [key, value] = entry;\r\n        if (value != null) {\r\n            let fieldConfig = config[key];\r\n            parseFieldValue(fieldObj, key, value, fieldConfig);\r\n        }\r\n    }\r\n    return fieldObj;\r\n};\r\n\r\nconst buildFormData = (formData = {}) => {\r\n    let _formData = {};\r\n    let entries = Object.entries(formData);\r\n    for (let entry of entries) {\r\n        let [key, value] = entry;\r\n        const vals = [];\r\n        const fields = key.split('-');// startTime$$timestamp-endTime$$timestamp\r\n        if (fields.length === 1) {\r\n            vals.push(value);\r\n        } else {\r\n            value = value || [];\r\n            vals.push(...value);\r\n        }\r\n        fields.forEach((field, i) => {\r\n            let $$index = field.indexOf('$$');\r\n            if ($$index > -1) {\r\n                // 传给接口的字段特殊处理\r\n                let dataType = field.substring($$index + 2);\r\n                let tempValue = vals[i];\r\n\r\n                // 如果当前对象类型为数组\r\n                if (dataType === \"array\" && tempValue instanceof Array) {\r\n                    vals[i] = tempValue.map((temp) => {\r\n                        // 如果元素为对象，则进行递归编译子参数\r\n                        if (temp instanceof Object) {\r\n                            temp = buildFormData(temp);\r\n                        }\r\n                        return temp;\r\n                    });\r\n                } else {\r\n                    vals[i] = _parseItemValue(tempValue, dataType);\r\n                }\r\n                field = field.substring(0, $$index);\r\n            }\r\n            _formData[field] = vals[i];\r\n        });\r\n    }\r\n    return _formData;\r\n};\r\n\r\nconst format = 'YYYY-MM-DD';\r\n\r\nfunction formatYYYYMMDD(value) {\r\n    return moment(new Date(value))\r\n        .format(format);\r\n}\r\n\r\nexport {\r\n    toTreeData,\r\n    isArrayEqual,\r\n    valuesToStrings,\r\n    generateHash,\r\n    buildFilterParams,\r\n    mapPropsToFields,\r\n    buildFormData,\r\n    analysisUrlSearch,\r\n    formatYYYYMMDD,\r\n};\r\n\r\nexport default {\r\n    toTreeData,\r\n    isArrayEqual, // 1\r\n    valuesToStrings, // 1\r\n    generateHash,\r\n    buildFilterParams, // 1\r\n    mapPropsToFields,\r\n    buildFormData,\r\n    analysisUrlSearch,\r\n    formatYYYYMMDD,\r\n};\r\n","/**\r\n * 统一消息管理, 将消息发送给所有订阅这个消息类型的模块\r\n * 采用 订阅/发布(观察者) 这种设计模块式开发\r\n */\r\nclass MsgCenter {\r\n    topicSubsMap = new Map();\r\n    uuid = 0;\r\n\r\n    _getUUID() {\r\n        return ++this.uuid;\r\n    }\r\n\r\n    publish(topic, resultObj) {\r\n        if (!this.topicSubsMap.has(topic)) {\r\n            return false;\r\n        }\r\n        let subscribers = this.topicSubsMap.get(topic);\r\n        subscribers.forEach((sub) => {\r\n            sub.func(topic, resultObj);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 订阅事件\r\n     * @param topic string | array\r\n     * @param func function(topic, event)\r\n     * @param uuid\r\n     * @returns {*|number}\r\n     */\r\n    subscribe(topic, func, uuid) {\r\n        uuid = uuid || this._getUUID();\r\n        if (Array.isArray(topic)) {\r\n            topic.forEach((item) => {\r\n                this.subscribe(item, func, uuid);\r\n            });\r\n            return uuid;\r\n        }\r\n        if (!this.topicSubsMap.has(topic)) {\r\n            this.topicSubsMap.set(topic, []);\r\n        }\r\n        this.topicSubsMap.get(topic).push({\r\n            token: uuid,\r\n            func: func\r\n        });\r\n        return uuid;\r\n    }\r\n\r\n    unsubscribe(token) {\r\n        for (let subs of this.topicSubsMap.values()) {\r\n            for (let i = 0; i < subs.length; i++) {\r\n                if (subs[i].token == token) {\r\n                    subs.splice(i--, 1);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    reset() {\r\n        this.topicSubsMap.clear();\r\n    }\r\n}\r\n\r\nexport default new MsgCenter();\r\n"," /**\r\n * 1. 定义数据库相关的变量\r\n * 2. 初始化数据库 database\r\n * 3. 创建数据表 objectStore\r\n * 4. 删除数据表\r\n * 4. 增加记录 object\r\n * 5. 修改记录\r\n * 6. 删除记录\r\n * stores - objectStore - tables\r\n * storeName - storeNames\r\n */\r\nlet _db = null;\r\nconst _dbName = 'ibor_db'; // test_db数据库\r\nconst _dbVersion = 1;\r\nconst T_CUSTOM_TABLE = \"read_table\"; // test 表\r\n\r\n/**\r\n * 相当于建表和定义表结构\r\n * @param {*} db 数据库\r\n * @param {*} storeName 表名（objectStore name)\r\n */\r\nconst _initStore = (db, storeName) => {\r\n  if (db.objectStoreNames.contains(storeName)) {\r\n    return;\r\n  }\r\n  let objectStore = db.createObjectStore(storeName, {\r\n    keyPath: \"id\",\r\n    autoIncrement: false\r\n  });\r\n  objectStore.createIndex(\"name\", \"name\", {\r\n    unique: false\r\n  });\r\n};\r\n\r\n/**\r\n * 初始化 IndexedDB\r\n */\r\nconst initIndexedDB = (cb) => {\r\n  // 获取到indexedDB实例,若为新（子）窗口，则取父窗口的 indexedDB 实例(保证只打开一次 indexedDB)\r\n  let indexedDB = window.indexedDB;\r\n  if (indexedDB.IBORDB) {\r\n    return;\r\n  }\r\n  // 初始IndexDB\r\n  let request = indexedDB.open(_dbName, _dbVersion);\r\n  request.onerror = function (e) {\r\n    console.log('error to open DB', e);\r\n  };\r\n  request.onsuccess = function (e) {\r\n    console.log(\"success to open DB\");\r\n    _db = e.target.result;\r\n    indexedDB.IBORDB = _db;\r\n    cb && cb();\r\n  };\r\n  request.onupgradeneeded = function (e) {\r\n    let db = e.target.result;\r\n    _initStore(db, T_CUSTOM_TABLE); // 创建 objectStore\r\n  };\r\n};\r\n\r\n/**\r\n * 返回 storeName 对应的 table(objectStore)\r\n * @param {*} storeName 表名\r\n * @param {*} mode 模式\r\n */\r\nconst _store = (storeName, mode = 'readwrite') => {\r\n  return new Promise((resolve) => {\r\n    let dbInstance = window.indexedDB.IBORDB || window.opener.indexedDB.IBORDB; // 在子窗口操作 indexedDB\r\n     let objectStore = dbInstance.transaction([storeName], mode).objectStore(storeName);\r\n    resolve(objectStore);\r\n  });\r\n};\r\n\r\n/**\r\n * 清空数据表数据（objectStore）\r\n * @param {*} storeName\r\n */\r\nconst clearStore = (storeName) => {\r\n  _store(storeName).then((objectStore) => {\r\n    objectStore.clear();\r\n  });\r\n};\r\n\r\n/**\r\n * 1. 校验\r\n * 2. 执行插入\r\n * 3. 返回 promise 格式：result = { code: 200/500, data: {}， msg: “” }\r\n * @param {*} storeName 表名\r\n * @param {*} data 插入的数据\r\n */\r\nconst insertData = (storeName, data) => {\r\n  return new Promise((resolve, reject) => {\r\n    _store(storeName).then((objectStore) => {\r\n      let request = objectStore.add(data);\r\n      request.onsuccess = () => {\r\n        resolve(request.result);\r\n      };\r\n      request.onerror = (e) => {\r\n        reject(e);\r\n      };\r\n    }).catch((e) => {\r\n      reject(e);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 获取表中相应数据\r\n * @param {*} storeName 表名\r\n * @param {*} key 对应数据表记录\r\n * 1. 校验\r\n * 2. 取数据\r\n * 3. 返回\r\n */\r\nconst getDataByKey = (storeName, key) => {\r\n  return new Promise((resolve, reject) => {\r\n    _store(storeName).then((objectStore) => {\r\n      let request = objectStore.get(key);\r\n      request.onsuccess = (e) => {\r\n        resolve(e.target.result);\r\n      };\r\n      request.onerror = (e) => {\r\n        reject(e);\r\n      };\r\n    }).catch((e) => {\r\n      reject(e);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 更新表数据\r\n * @param {*} storeName 表名\r\n * @param {*} data 更新数据记录\r\n */\r\nconst updateData = (storeName, data) => {\r\n  return new Promise((resolve, reject) => {\r\n    _store(storeName).then((objectStore) => {\r\n      let request = objectStore.put(data);\r\n      request.onsuccess = () => {\r\n        resolve(request.result);\r\n      };\r\n      request.onerror = (e) => {\r\n        reject(e);\r\n      };\r\n    })\r\n    .catch((e) => {\r\n      reject(e);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 删除一条记录\r\n * @param {*} storeName\r\n * @param {*} key\r\n */\r\nconst deleteData = (storeName, key) => {\r\n  return new Promise((resolve, reject) => {\r\n    _store(storeName).then((objectStore) => {\r\n      let request = objectStore.delete(key);\r\n      request.onsuccess = () => {\r\n        resolve(request.result);\r\n      };\r\n      request.onerror = (e) => {\r\n        reject(e);\r\n      };\r\n    }).catch((e) => {\r\n      reject(e);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 查询该 objectStore 所有数据记录\r\n * @param {*} storeName 表名\r\n */\r\nconst queryData = (storeName) => {\r\n  return new Promise((resolve, reject) => {\r\n    _store(storeName).then((objectStore) => {\r\n      let request = objectStore.openCursor();\r\n      let results = [];\r\n      request.onsuccess = (e) => {\r\n        let cursor = e.target.result;\r\n        if (cursor) {\r\n          results.push(cursor.value);\r\n          cursor.continue();\r\n        } else {\r\n          resolve(results);\r\n        }\r\n      };\r\n      request.onerror = (e) => {\r\n        reject(e);\r\n      };\r\n    }).catch((e) => {\r\n      reject(e);\r\n    });\r\n  });\r\n};\r\n\r\nconst wrapperTableName = (tableName) => {\r\n  return {\r\n    insertData: (...args) => { return insertData(tableName, ...args); }, // 插入一条数据\r\n    getDataByKey: (...args) => { return getDataByKey(tableName, ...args); }, // 根据 key 获取一条数据\r\n    updateData: (...args) => { return updateData(tableName, ...args); }, // 更新一条数据\r\n    deleteData: (...args) => { return deleteData(tableName, ...args); }, // 删除一条数据\r\n    queryData: () => { return queryData(tableName); }, // 查询表数据\r\n    clearStore: () => { clearStore(tableName); } // 清空表数据\r\n  };\r\n};\r\n\r\nexport {\r\n  initIndexedDB,\r\n  wrapperTableName\r\n};\r\n\r\nexport default {\r\n  initIndexedDB,\r\n  wrapperTableName\r\n};\r\n","const ApiConfig = require('./api');\r\n\r\nclass API {\r\n    constructor(props) { // 例如 {site: 'auth'}\r\n        if (props !== undefined) {\r\n            if (typeof props === 'string') {\r\n                this._config = { site: props };\r\n            } else {\r\n                this._config = Object.assign({}, props);\r\n            }\r\n        } else {\r\n            this._config = {};\r\n        }\r\n    }\r\n\r\n    setBase(base) {\r\n        this._config.base = base;\r\n        return this;\r\n    }\r\n\r\n    setSite(site) {\r\n        this._config.site = site;\r\n        return this;\r\n    }\r\n\r\n    setUrlPrefix(prefix) {\r\n        this._config.urlPrefix = prefix;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 解析所有带{},用正则解析,替换成正确的值\r\n     * @param url\r\n     * @param params\r\n     * @private\r\n     * @return url\r\n     */\r\n    _replaceUrl(url, params) {\r\n        // 1. 解析所有带{},用正则解析\r\n        // 2. 取出{}中的值，然后去params找对应的值（没有则console.error报错）\r\n        // 然后值替换，并删除params对应属性\r\n        let matchList = url.match(/\\{[a-zA-Z]+\\}/g) || [];\r\n        matchList.forEach((p) => {\r\n            let key = p.replace('{', '')\r\n                .replace('}', '');\r\n            if (key in params) {\r\n                url = url.replace(p, params[key]);\r\n                delete params[key]; // 替换完成删除 params 中对应变量\r\n            } else {\r\n                console.error('require param \"' + key + '\"not found');\r\n            }\r\n        });\r\n\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * 构造请求URL\r\n     * @param url    请求部分的url\r\n     * @param params 请求参数\r\n     * @param method 请求方法 {GET/POST/...}\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    _makeURL(url, params, method) {\r\n        // 深拷贝会被函数修改到的参数\r\n        let paramsCopy = JSON.parse(JSON.stringify(params));\r\n        if (url.includes('http')) { // 已经是绝对路径了，则无需处理\r\n            return {\r\n                url,\r\n                params\r\n            };\r\n        }\r\n        let { site, urlPrefix } = this._config;\r\n        let returnUrl = '';\r\n        if (site) {\r\n            if (site in ApiConfig.domain) {\r\n                returnUrl += ApiConfig.domain[site];\r\n            } else {\r\n                returnUrl += ApiConfig.base + '/' + site;\r\n            }\r\n        } else {\r\n            returnUrl += ApiConfig.base;\r\n        }\r\n        if (urlPrefix) {\r\n            returnUrl += '/' + urlPrefix;\r\n        }\r\n        // 拼接接口具体url  // https://10.0.74.200/auth/api/v2/menus/{id}\r\n        returnUrl += url;\r\n\r\n        // https://10.0.74.200/auth/api/v2/menus/1\r\n        returnUrl = this._replaceUrl(returnUrl, paramsCopy);\r\n\r\n        // https://10.0.74.200/auth/api/v2/menus/1?a=123\r\n        if (method === 'GET') {\r\n            // 来拼接剩余请求参数\r\n            let searchParams = new URLSearchParams();\r\n            for (let p in paramsCopy) {\r\n                const value = paramsCopy[p];\r\n                const paramStr = typeof value === 'string' ? value : JSON.stringify(value);\r\n                searchParams.append(p, paramStr);\r\n            }\r\n            // 判断searchParams是否包含字符串信息\r\n            if (searchParams.toString().length > 0) {\r\n                if (returnUrl.includes('?')) {\r\n                    returnUrl += '&' + searchParams;\r\n                } else {\r\n                    returnUrl += '?' + searchParams;\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            url: returnUrl,\r\n            params: paramsCopy\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 远程接口调用，增加jwt-user-info参数\r\n     * @param url\r\n     * @param userInfo\r\n     * @returns returnUrl\r\n     * 如果类型为对象，则增加jwt-user-info属性，\r\n     * 如果类型为字符串（目前需要传入URL），拼接jwt-user-info到URL参数\r\n     */\r\n    // _handleURL(url) {\r\n    //   let returnUrl = url;\r\n    //   if (ApiConfig.isDebug) {\r\n    //     const searchParams = new URLSearchParams();\r\n    //     const userInfo = JSON.stringify(userLocalStore.getItem('userInfo'));\r\n    //     searchParams.append('userInfo', userInfo);\r\n    //     if (returnUrl.indexOf('?') > -1) {\r\n    //       returnUrl += \"&\" + searchParams;\r\n    //     } else {\r\n    //       returnUrl += \"?\" + searchParams;\r\n    //     }\r\n    //   }\r\n    //   return returnUrl;\r\n    // }\r\n    /**\r\n     * 增加token请求验证头,在debug模式下,增加jwt-user-info属性\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    _handleHeader() {\r\n        // if (ApiConfig.isDebug) {\r\n        //     const userInfo = JSON.stringify(userLocalStore.getItem('userInfo'));\r\n        //     return {\r\n        //         'Authorization': token,\r\n        //         'Jwt-User-Info': userInfo,\r\n        //     };\r\n        // } else {\r\n        //     return {\r\n        //         'Authorization': token,\r\n        //     };\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * 调用请求\r\n     * @param url    请求部分url\r\n     * @param params 请求参数\r\n     * @param method 请求方法 {GET/POST/...}\r\n     * @param config\r\n     * @returns {Promise}\r\n     * @private\r\n     */\r\n    _request(url, params, method, config) {\r\n        // if (config.loading) {\r\n        //     // 开启 Loading 效果\r\n        //     this.spin.showLoading();\r\n        // }\r\n        let request = null;\r\n        let urlInfo = this._makeURL(url, params, method);\r\n        let reqUrl = urlInfo.url;\r\n        const timeout = config.timeout || this._config.timeout;\r\n        const restParams = urlInfo.params; // 传递处理剩下的 restParams 给除了 GET 请求外的其他请求作为 body 的内容对象\r\n        const headers = new Headers();\r\n\r\n        console.info(method, urlInfo.url);\r\n        // headers.append(\"Accept\", \"application/json,*/*\");\r\n        if (!config.multipart) {\r\n            headers.append('Content-Type', 'application/json');\r\n        }\r\n\r\n        if (method === 'GET') {\r\n            request = new Request(reqUrl, {\r\n                headers: headers,\r\n                method: method\r\n            });\r\n        } else {\r\n            request = new Request(reqUrl, {\r\n                headers: headers,\r\n                body: config.multipart === true ? params : JSON.stringify(restParams),\r\n                method: method\r\n            });\r\n        }\r\n\r\n        let st = null;\r\n        let promise = new Promise((resolve) => {\r\n            fetch(request)\r\n                .then((response) => {\r\n                    if (response.ok) {\r\n                        return response.json();\r\n                    }\r\n                    throw new Error('Network response was not ok');\r\n                })\r\n                .then((json) => {\r\n                    console.info(url, params, json);\r\n                    st && clearTimeout(st); // 成功时取消超时返回\r\n\r\n                    resolve(json);\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Request failed', url, params, error);\r\n                });\r\n        });\r\n\r\n        if (timeout !== -1) {\r\n            // 以下代码处理请求超时\r\n            // 实现原理是通过 Promise.race 来比较超时 Promise 与 原始 Promise 哪个最快返回\r\n            // 最快返回的将清除另一个未返回的 Promise, 达到请求超时的效果\r\n            let abortFn = null;\r\n            const abortDelay = timeout || 60 * 1000;\r\n\r\n            // 通过 Alert.wrappedAlert 函数预先将 alertContainer 保存起来\r\n            // 让超时请求弹出框在初始化超时请求的页面弹出\r\n            // const alertFn = Alert.wrappedAlert(Alert.error);\r\n            let abortPromise = new Promise((resolve, reject) => {\r\n                abortFn = () => {\r\n                    // 手动调起 promise reject 方法\r\n                    reject({\r\n                        code: 500,\r\n                        msg: `请求超时,请重试(${abortDelay}ms)`\r\n                    });\r\n                };\r\n            }).then(() => {\r\n            })\r\n                .catch((res) => {\r\n                    // alertFn(res);\r\n                });\r\n            // 这里使用Promise.race，以最快 resolve 或 reject 的结果来传入后续绑定的回调\r\n            const abortablePromise = Promise.race([promise, abortPromise]);\r\n            st = setTimeout(abortFn, abortDelay); // 默认一分钟超时\r\n            return abortablePromise;\r\n        } else {\r\n            return promise;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @url URL\r\n     * @params 参数，可选\r\n     */\r\n    get(url, params, config = { loading: false, delayLoading: false }) {\r\n        return this._request(url, params || {}, 'GET', config);\r\n    }\r\n\r\n    post(url, params, config = { loading: true }) {\r\n        return this._request(url, params || {}, 'POST', config);\r\n    }\r\n\r\n    put(url, params, config = { loading: true }) {\r\n        return this._request(url, params || {}, 'PUT', config);\r\n    }\r\n\r\n    delete(url, params, config = { loading: true }) {\r\n        return this._request(url, params || {}, 'DELETE', config);\r\n    }\r\n}\r\n\r\nexport default API;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Icon } from 'antd';\r\nimport _ from 'lodash';\r\nimport classNames from 'classnames';\r\nimport Util from 'utils/util';\r\nimport SearchTree from './SearchTree';\r\n\r\nconst styles = require('./index.scss');\r\n\r\nclass TreeComponent extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     // this.api = new API(props.treeSite);\r\n    // }\r\n\r\n    // TODO 可优化初始化render,现在初始化至少有两次render\r\n    state = {\r\n        treeData: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.initTreeData(this.props);\r\n    }\r\n\r\n    /**\r\n     * 判断 props 的更改是否达到了更新组件的条件\r\n     * props 的更新操作不直接造成组件的更新, 而是通过 iniTreeData 中去触发 setState 方法重新渲染组件\r\n     * @param nextProps\r\n     */\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.shouldUpdateWhenMainPropsChange(nextProps)) {\r\n            this.updateWhenMainPropsChange = true;\r\n            this.initTreeData(nextProps);\r\n        } else {\r\n            this.updateWhenMainPropsChange = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 如果是 state 的改变引起的更新操作, 则一定会重新渲染组件\r\n     * 如果是 props 的改变造成的更新则不进行重新的 render\r\n     * 因为 componentWillReceiveProps 里已经进行了 setState 操作\r\n     * props 的变化引起的更新行为最终会体现为 state 的更新操作\r\n     * 所以这里只允许 state 的变化引起组件的重新渲染\r\n     * @param nextProps\r\n     * @param nextState\r\n     * @returns {boolean}\r\n     */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.shouldUpdateWhenStateChange(nextState)\r\n            || !this.updateWhenMainPropsChange;\r\n    }\r\n\r\n    /**\r\n     * 以下属性有变化即视为 props 的更改会造成组件重新渲染\r\n     * @param nextProps\r\n     * @returns {*|boolean}\r\n     */\r\n    shouldUpdateWhenMainPropsChange = (nextProps) => {\r\n        const { treeData, treeUrl, treeParams } = this.props;\r\n        return (\r\n            !Util.isArrayEqual(treeData, nextProps.treeData)\r\n            || !_.isEqual(treeParams, nextProps.treeParams)\r\n            || treeUrl !== nextProps.treeUrl\r\n        );\r\n    };\r\n    /**\r\n     * 判断是 state 的变化是否会影响组件重新渲染\r\n     * @param nextState\r\n     * @returns {boolean}\r\n     */\r\n    shouldUpdateWhenStateChange = (nextState) => {\r\n        const { treeData } = this.state;\r\n        return !Util.isArrayEqual(treeData, nextState.treeData);\r\n    };\r\n    initTreeData = (props) => {\r\n        const { treeData, treeUrl } = props;\r\n        if (treeData.length) {\r\n            this.setTreeData(treeData);\r\n        } else if (treeUrl) {\r\n            // const params = this.getUrlParams(props);\r\n            // this.api.get(treeUrl, params)\r\n            //     .then((res) => {\r\n            //         if (res.code == 200) {\r\n            //             this.setTreeData(res.data.list);\r\n            //         } else {\r\n            //             message.error(res);\r\n            //         }\r\n            //     });\r\n        }\r\n    };\r\n    setTreeData = (treeData = []) => {\r\n        this.setState({\r\n            treeData\r\n        });\r\n    };\r\n    getUrlParams = (props) => {\r\n        return {\r\n            query: Util.buildFilterParams(props.treeParams)\r\n        };\r\n    };\r\n    handleRefresh = () => {\r\n        const { treeData, onRefresh } = this.props;\r\n        // 如果 treeData 由外部组件传入,则调用外部传入的刷新函数进行刷新\r\n        if (treeData.length) {\r\n            onRefresh();\r\n        } else {\r\n            this.initTreeData(this.props);\r\n        }\r\n    };\r\n\r\n    // 获取treeData\r\n    getTreeData = () => {\r\n        return this.state.treeData;\r\n    };\r\n\r\n    render() {\r\n        let { treeData } = this.state;\r\n        let {\r\n            showFrame, hiddenValues, disabledValues, disableCheckboxValues,\r\n            title, preHandleTreeData, defaultCheckedKeys, checkedKeys,\r\n            defaultExpandedKeys, expandedKeys, defaultSelectedKeys, selectedKeys\r\n        } = this.props;\r\n\r\n        // 将以下数组转成字符串数据以支持外部组件直接传入 int 类型数组\r\n        hiddenValues = Util.valuesToStrings(hiddenValues);\r\n        disabledValues = Util.valuesToStrings(disabledValues);\r\n        disableCheckboxValues = Util.valuesToStrings(disableCheckboxValues);\r\n        defaultCheckedKeys = Util.valuesToStrings(defaultCheckedKeys);\r\n        checkedKeys = Util.valuesToStrings(checkedKeys);\r\n        defaultExpandedKeys = Util.valuesToStrings(defaultExpandedKeys);\r\n        expandedKeys = Util.valuesToStrings(expandedKeys);\r\n        defaultSelectedKeys = Util.valuesToStrings(defaultSelectedKeys);\r\n        selectedKeys = Util.valuesToStrings(selectedKeys);\r\n\r\n        const treeFrameClass = classNames({\r\n            [`${styles.tree}`]: true,\r\n            [`${styles['simple-tree']}`]: !showFrame,\r\n            'tree-container': true,\r\n        });\r\n\r\n        // 预处理树节点数据,如果外部有传入处理函数的话\r\n        treeData.forEach((item) => {\r\n            item.hidden = hiddenValues.includes(`${item.id}`);\r\n            item.disabled = disabledValues.includes(`${item.id}`);\r\n            item.disableCheckbox = disableCheckboxValues.includes(`${item.id}`);\r\n        });\r\n        treeData = preHandleTreeData(treeData);\r\n\r\n        const props = {\r\n            defaultCheckedKeys,\r\n            defaultExpandedKeys,\r\n            defaultSelectedKeys,\r\n            treeData\r\n        };\r\n\r\n        // 当 this.props.value 不为空时才能传入 value 这个字段到 Select 组件, 不然会导致默认显示出 bug\r\n        !_.isUndefined(checkedKeys) && (props.checkedKeys = checkedKeys);\r\n        !_.isUndefined(expandedKeys) && (props.expandedKeys = expandedKeys);\r\n        !_.isUndefined(selectedKeys) && (props.selectedKeys = selectedKeys);\r\n\r\n        return (\r\n            <div className={treeFrameClass}>\r\n                {showFrame && (\r\n                    <div className={styles.header + ' tree-header'}>\r\n                        <div>\r\n                            {title}\r\n                        </div>\r\n                        <Icon type=\"reload\" onClick={this.handleRefresh} className=\"btn-reload\"/>\r\n                    </div>\r\n                )}\r\n                {treeData.length ? <SearchTree {...this.props} {...props}/> : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTreeComponent.propTypes = {\r\n    showFrame: PropTypes.bool,\r\n    treeData: PropTypes.array,\r\n    treeUrl: PropTypes.string,\r\n    treeParams: PropTypes.object,\r\n    treeSite: PropTypes.string,\r\n    preHandleData: PropTypes.func,\r\n    hiddenValues: PropTypes.array,\r\n    disabledValues: PropTypes.array,\r\n    disableCheckboxValues: PropTypes.array,\r\n};\r\n\r\nTreeComponent.defaultProps = {\r\n    showFrame: true, // 是否显示树组件外框(包含标题bar和border)\r\n    treeData: [],\r\n    treeParams: {}, // 获取数据过滤参数\r\n    treeSite: 'auth', // 将从指定site获取数据\r\n    onRefresh: () => {\r\n    },\r\n    preHandleTreeData: (treeData) => {\r\n        return treeData;\r\n    }, // 预处理数据\r\n    hiddenValues: [], // 隐藏树节点列表\r\n    disabledValues: [], // 禁用(不隐藏)树节点列表\r\n    disableCheckboxValues: [] // 禁用checkbox树节点列表\r\n};\r\n\r\nexport default TreeComponent;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TreeSelect } from 'antd';\r\nimport { PropTypes as MobxPropTypes } from \"mobx-react\";\r\nimport _ from 'lodash';\r\nimport Util from 'utils/util';\r\n\r\nrequire('./index.scss');\r\n\r\nclass TreeSelectComponent extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.api = new API(props.treeSite);\r\n    // }\r\n\r\n    state = {\r\n        inputValue: '', // 搜索文字受控\r\n        treeData: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.initTreeData(this.props);\r\n    }\r\n\r\n    /**\r\n     * 判断 props 的更改是否达到了更新组件的条件\r\n     * props 的更新操作不直接造成组件的更新, 而是通过 iniTreeData 中去触发 setState 方法重新渲染组件\r\n     * @param nextProps\r\n     */\r\n    componentWillReceiveProps(nextProps) {\r\n        // 判断如果存在 value 属性, 且当 value 从有到无时(视为清空)清空 inputValue 值\r\n        if ('value' in nextProps && nextProps.multiple) {\r\n            if (_.isUndefined(nextProps.value) && !_.isEqual(this.props.value, nextProps.value)) {\r\n                this.setState({ inputValue: '' });\r\n            }\r\n        }\r\n        // 一旦 treeSite 有变化，重新赋值 this.api\r\n        // if (nextProps.treeSite && this.props.treeSite !== nextProps.treeSite) {\r\n        //     this.api = new API(nextProps.treeSite);\r\n        // }\r\n        if (nextProps.forceUpdateTree\r\n            || this.shouldUpdateWhenMainPropsChange(nextProps)) {\r\n            this.updateWhenMainPropsChange = true;\r\n            // 如果判断到 notFoundContent 属性有变化, 则进行一次强制刷新, 防止请求数据后前后数据仍然一致导致无法重新 render 的 bug\r\n            if (!_.isEqual(this.props.notFoundContent, nextProps.notFoundContent)) {\r\n                this.forceUpdate();\r\n            }\r\n            this.initTreeData(nextProps);\r\n        } else {\r\n            this.updateWhenMainPropsChange = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 如果是 props 的改变造成的更新则不进行重新的 render\r\n     * 因为 componentWillReceiveProps 里已经进行了 setState 操作\r\n     * 如果 forceUpdateTree 属性为 true 则会强制重新渲染组件\r\n     * @param nextProps\r\n     * @param nextState\r\n     * @returns {boolean}\r\n     */\r\n    // TODO 应该移除此判断\r\n    // 此处存在 bug ,当既有 main props 变化也有非 main props 的变化时, 在 main props 请求数据返回一样的情况下(比如均为空数组), 不会造成重新 render, 这个时候非 main props 的变化会被忽略\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.shouldUpdateWhenStateChange(nextState) || !this.updateWhenMainPropsChange;\r\n    }\r\n\r\n    /**\r\n     * 以下属性有变化即视为 props 的更改会造成组件重新渲染\r\n     * @param nextProps\r\n     * @returns {*|boolean}\r\n     */\r\n    shouldUpdateWhenMainPropsChange = (nextProps) => {\r\n        const { treeData, treeUrl, treeParams } = this.props;\r\n        return (\r\n            !Util.isArrayEqual(treeData, nextProps.treeData)\r\n            || !_.isEqual(treeParams, nextProps.treeParams)\r\n            || treeUrl !== nextProps.treeUrl\r\n        );\r\n    };\r\n    /**\r\n     * 判断是 state 的变化是否会影响组件重新渲染\r\n     * @param nextState\r\n     * @returns {boolean}\r\n     */\r\n    shouldUpdateWhenStateChange = (nextState) => {\r\n        const { treeData } = this.state;\r\n        return !Util.isArrayEqual(treeData, nextState.treeData);\r\n    };\r\n    initTreeData = (props) => {\r\n        const { treeData, treeUrl } = props;\r\n        if (treeData.length) {\r\n            this.setTreeData(treeData);\r\n        } else if (treeUrl) {\r\n            // const params = this.getUrlParams(props);\r\n            // this.api.get(treeUrl, params)\r\n            //     .then((res) => {\r\n            //         if (res.code == 200) {\r\n            //             this.setTreeData(res.data.list);\r\n            //         } else {\r\n            //             message.error(res);\r\n            //         }\r\n            //     });\r\n        }\r\n    };\r\n    setTreeData = (treeData = []) => {\r\n        this.setState({\r\n            treeData\r\n        });\r\n    };\r\n    getUrlParams = (props) => {\r\n        return {\r\n            query: Util.buildFilterParams(props.treeParams)\r\n        };\r\n    };\r\n    onChange = (value, label, extra) => {\r\n        logger.log(\"value:\", value);\r\n        this.props.onChange(value, label, extra);\r\n    };\r\n    onSearch = (inputValue) => {\r\n        logger.log(\"search value:\", inputValue);\r\n        this.setState({ inputValue });\r\n    };\r\n    handleTreeData = (treeData) => {\r\n        const config = {\r\n            expand: true,\r\n            extProp: {\r\n                value: (item) => {\r\n                    return item.id;\r\n                },\r\n                label: (item) => {\r\n                    return item.name;\r\n                },\r\n                key: (item) => {\r\n                    return item.id;\r\n                },\r\n            }\r\n        };\r\n\r\n        let { disabledValues, hiddenValues, shouldDisableCheckbox } = this.props;\r\n        disabledValues = Util.valuesToStrings(disabledValues);\r\n        hiddenValues = Util.valuesToStrings(hiddenValues);\r\n\r\n        if (hiddenValues.length) {\r\n            treeData = treeData.filter((item) => {\r\n                return !hiddenValues.includes(`${item.id}`);\r\n            });\r\n        }\r\n\r\n        treeData.forEach((item) => {\r\n            if (disabledValues.includes(`${item.id}`)) {\r\n                item.disabled = true;\r\n            }\r\n            _.isFunction(shouldDisableCheckbox) && (item.disableCheckbox = shouldDisableCheckbox(item));\r\n        });\r\n\r\n        return Util.toTreeData(treeData, config);\r\n    };\r\n\r\n    render() {\r\n        let { treeData, inputValue } = this.state;\r\n        let { defaultValue, value, treeDefaultExpandedKeys, preHandleTreeData, notFoundContent } = this.props;\r\n        const treeDataLength = treeData.length;\r\n\r\n        defaultValue = Util.valuesToStrings(defaultValue);\r\n        value = Util.valuesToStrings(value);\r\n        treeDefaultExpandedKeys = Util.valuesToStrings(treeDefaultExpandedKeys);\r\n\r\n        treeData && (treeData = preHandleTreeData(treeData));\r\n        treeData && (treeData = this.handleTreeData(treeData));\r\n\r\n        const props = {\r\n            size: 'small',\r\n            defaultValue,\r\n            inputValue,\r\n            treeDefaultExpandedKeys,\r\n            treeData,\r\n            onChange: this.onChange,\r\n            onSearch: this.onSearch,\r\n            style: { width: '100%' }\r\n        };\r\n\r\n        // 当 this.props.value 不为空时才能传入 value 这个字段到 Select 组件, 不然会导致默认显示出 bug\r\n        !_.isUndefined(value) && (props.value = value);\r\n\r\n        return (\r\n            treeDataLength ? <TreeSelect {...this.props} {...props}/> :\r\n                <TreeSelect size=\"small\" key=\"empty-tree-select\" notFoundContent={notFoundContent}\r\n                            style={{ width: \"100%\" }}/>\r\n        );\r\n    }\r\n}\r\n\r\nTreeSelectComponent.propTypes = {\r\n    treeData: PropTypes.oneOfType([\r\n        PropTypes.array,\r\n        MobxPropTypes.observableArray\r\n    ]),\r\n    treeUrl: PropTypes.string,\r\n    treeParams: PropTypes.object,\r\n    treeSite: PropTypes.string,\r\n    forceUpdateTree: PropTypes.bool,\r\n    preHandleData: PropTypes.func,\r\n    disabledValues: PropTypes.array,\r\n    hiddenValues: PropTypes.array,\r\n    shouldDisableCheckbox: PropTypes.func\r\n};\r\nTreeSelectComponent.defaultProps = {\r\n    treeData: [],\r\n    treeParams: {}, // 获取数据过滤参数\r\n    treeSite: 'auth', // 将从指定site获取数据\r\n    preHandleTreeData: (treeData) => {\r\n        return treeData;\r\n    }, // 预处理数据\r\n    disabledValues: [], // 禁用节点id列表\r\n    hiddenValues: [], // 隐藏节点id列表\r\n    // ================= Ant-TreeSelect =================\r\n    showSearch: true,\r\n    notFoundContent: \"暂无数据\",\r\n    onChange: () => {\r\n    },\r\n    showCheckedStrategy: TreeSelect.SHOW_ALL,\r\n    filterTreeNode: (input, treeNode) => {\r\n        return treeNode.props.title.toLowerCase()\r\n            .indexOf(input.toLowerCase()) >= 0;\r\n    },\r\n    optionFilterProp: \"label\", // 默认搜索label值\r\n};\r\n\r\nexport default TreeSelectComponent;\r\n","export { default as Tree } from './Tree';\r\nexport { default as TreeSelect } from './TreeSelect';\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactDOM from 'react-dom';\r\nimport { Input, Popconfirm, Tree, Menu, Dropdown } from 'antd';\r\nimport { PropTypes as MobxPropTypes } from \"mobx-react\";\r\nimport _ from 'lodash';\r\nimport classnames from 'classnames';\r\nimport Util from 'utils/util';\r\n\r\nconst TreeNode = Tree.TreeNode;\r\nconst QUICK_SEARCH_DELAY = 300;  // 快速搜索延时\r\n\r\nclass SearchTreeComponent extends React.Component {\r\n  treeList = []; // 菜单数据 list = [{id1, name1}, {id2, name2}...]\r\n  treeDataCopy = []; // 菜单数据，树形结构\r\n\r\n  state = {\r\n    inputValue: '',\r\n    expandedKeys: [],\r\n    autoExpandParent: true\r\n  };\r\n  /**\r\n   * 模糊搜索框变化时触发\r\n   * 1. 重新设置 expandedKeys\r\n   * @param event\r\n   */\r\n  handleChange = (event) => {\r\n    // 一旦输入框有变化,则将模糊查找的字段设为有效\r\n    const value = event.target.value;\r\n    this._filterExpandedKeys(value);\r\n  }\r\n\r\n\r\n  /**\r\n   * 点击右键菜单节点操作按钮触发\r\n   */\r\n  handleItemClick = (info) => {\r\n    const { key } = info;\r\n    const { data } = info.item.props;\r\n    if (key === 'add') {\r\n      // 执行外围添加函数\r\n      this.props.onAddNode(data);\r\n    } else if (key === 'mod') {\r\n      // 执行外围编辑函数\r\n      this.props.onModNode(data);\r\n    } else if (key === 'open') {\r\n      this.props.onOpen(data);\r\n    } else {\r\n      // 非指定事件类型时统一触发事件\r\n      this.props.onContextMenuClick(key, data);\r\n    }\r\n  }\r\n  onDelNode = (data) => {\r\n    this.props.onDelNode(data);\r\n  }\r\n  /**\r\n   * 传递给rc-tree的选中节点回调方法\r\n   * @param selectedKeys\r\n   * @param info\r\n   */\r\n  onSelect = (selectedKeys, info) => {\r\n    // 执行外围函数\r\n    this.props.onSelect(info.node.props.data, selectedKeys);\r\n  }\r\n  /**\r\n   * 传递给rc-tree的折叠节点时回调方法\r\n   * @param expandedKeys\r\n   */\r\n  onExpand = (expandedKeys) => {\r\n    // 执行外围函数\r\n    this.props.onExpand(expandedKeys);\r\n\r\n    // if not set autoExpandParent to false, if children expanded, parent can not collapse.\r\n    // or, you can remove all expanded chilren keys.\r\n    // 手动折叠标签时,将自动打开父标签属性设为否,否则会造成父标签无法折叠的bug\r\n    this.setState({\r\n      expandedKeys: expandedKeys,\r\n      autoExpandParent: false\r\n    });\r\n  }\r\n  onRightClick = (info) => {\r\n    const { rightable } = this.props;\r\n    if (!rightable) return;\r\n    this.renderRightClickMenu(info);\r\n    window.getSelection().removeAllRanges();\r\n  }\r\n  /**\r\n   * 渲染右键菜单\r\n   */\r\n  renderRightClickMenu(info) {\r\n    if (this.dropdown) {\r\n      ReactDOM.unmountComponentAtNode(this.cmContainer);\r\n      this.dropdown = null;\r\n    }\r\n    const item = info.node.props;\r\n    const itemData = item.data;\r\n    const { disabledContext } = item.data;\r\n    if (disabledContext) return null;\r\n    const contextMenuKeys = itemData.contextMenuKeys || [\"mod\", \"add\", \"del\", \"open\"];\r\n    const defaultContextMenuMap = new Map([\r\n      [\"mod\", <Menu.Item key=\"mod\" data={itemData}>编辑</Menu.Item>],\r\n      [\"add\", <Menu.Item key=\"add\" data={itemData}>添加</Menu.Item>],\r\n      [\"open\", <Menu.Item key=\"open\" data={itemData}>打开</Menu.Item>],\r\n      [\"del\", (\r\n        <Menu.Item key=\"del\" data={itemData}>\r\n          <Popconfirm\r\n            placement=\"topLeft\"\r\n            title=\"是否删除该节点?\"\r\n            onConfirm={() => { this.onDelNode(itemData); }}\r\n            okText=\"是\"\r\n            cancelText=\"否\"\r\n          >\r\n            <div>删除</div>\r\n          </Popconfirm>\r\n        </Menu.Item>\r\n      )]\r\n    ]);\r\n    // 定义每个节点的下拉菜单\r\n    const menu = (\r\n      <Menu className=\"treenode-context-menu\" onClick={this.handleItemClick}>\r\n        {contextMenuKeys.map((iconKey) => {\r\n          let action = iconKey;\r\n          if (typeof iconKey === \"object\") {\r\n            if (!defaultContextMenuMap.has(iconKey.action)) {\r\n              // 自定义渲染菜单项\r\n              return <Menu.Item key={iconKey.action} data={itemData}>{iconKey.name}</Menu.Item>;\r\n            }\r\n            action = iconKey.action;\r\n          }\r\n          // 从默认的右键菜单项数组中生成 MenuItem\r\n          return defaultContextMenuMap.get(action);\r\n        })}\r\n      </Menu>\r\n    );\r\n    this.dropdown = (\r\n      <Dropdown overlay={menu} placement=\"bottomLeft\" trigger={['click']} defaultVisible >\r\n        <span></span>\r\n      </Dropdown>\r\n    );\r\n\r\n    const container = this.getContainer();\r\n    Object.assign(this.cmContainer.style, {\r\n      position: 'absolute',\r\n      left: `${info.event.pageX}px`,\r\n      top: `${info.event.pageY}px`,\r\n    });\r\n\r\n    ReactDOM.render(this.dropdown, container);\r\n  }\r\n  getContainer() {\r\n    if (!this.cmContainer) {\r\n      this.cmContainer = document.createElement('div');\r\n      document.body.appendChild(this.cmContainer);\r\n    }\r\n    return this.cmContainer;\r\n  }\r\n  /**\r\n   * 拖拽树节点\r\n   * @param info\r\n   */\r\n  onDrop = (info) => {\r\n    const { node, dragNode, dropToGap, dropPosition } = info;\r\n    const targetNodeData = node.props.data;   // 目标节点\r\n    const dragNodeData = dragNode.props.data; // 操作节点\r\n    let dropType = '';\r\n    if (dropToGap) {\r\n      if (dropPosition <= 0) {\r\n        dropType = 'prev';\r\n      } else {\r\n        dropType = 'next';\r\n      }\r\n    } else {\r\n      dropType = 'inner';\r\n    }\r\n    this.props.onDrop(dragNodeData, targetNodeData, dropType);\r\n  }\r\n\r\n\r\n  /**\r\n   * 过滤包含搜索值的菜单项（获取设置展开项）\r\n   * @param value search input 输入值\r\n   */\r\n  _filterExpandedKeys = _.debounce((value) => {\r\n    let expandedKeys = [];\r\n\r\n    if (value) {\r\n      expandedKeys = this.treeList.map((item) => {\r\n        if (item.name.indexOf(value) > -1) {\r\n          return this._getParentKey(item.id, this.treeDataCopy);\r\n        }\r\n        return null;\r\n      }).filter((item, i, self) => {\r\n        return item && self.indexOf(item) === i;\r\n      });\r\n    }\r\n    this.setState({\r\n      inputValue: value,\r\n      expandedKeys,\r\n      autoExpandParent: true\r\n    });\r\n  }, QUICK_SEARCH_DELAY);\r\n\r\n  /**\r\n   * 获取包含搜索值的子项的父节点 id\r\n   * @param id 当前项的 id\r\n   * @param tree 树形结构数据\r\n   */\r\n  _getParentKey = (id, tree) => {\r\n    let parentKey;\r\n    for (let i = 0; i < tree.length; i++) {\r\n      const node = tree[i];\r\n      if (node.items) {\r\n        if (node.items.some((item) => { return item.id == id; })) {\r\n          parentKey = node.id;\r\n        } else if (this._getParentKey(id, node.items)) {\r\n          parentKey = this._getParentKey(id, node.items);\r\n        }\r\n      }\r\n    }\r\n    return parentKey;\r\n  };\r\n\r\n  renderTreeNode = (config) => {\r\n    const { addDiyClass, addDiyDom } = this.props.treeNodeConfig;\r\n    const { inputValue } = this.state;\r\n    const { treeData } = config;\r\n    return treeData.map((item) => {\r\n      const key = `${item.id}`; // 对key的操作均为字符串类型,应转成字符串\r\n      const name = item.name; // 指定 name 作为模糊搜索过滤字段\r\n      const itemData = item.data;\r\n\r\n      // 标红含有搜索值的子项\r\n      const index = name.indexOf(inputValue);\r\n      const beforeStr = name.substr(0, index);\r\n      const afterStr = name.substr(index + inputValue.length);\r\n\r\n      // 通过Dropdown组件包装使hover时自动下拉\r\n      const title = (\r\n        <span title={name}>\r\n          <span className=\"title\">\r\n            {\r\n              index > -1 ? <span>\r\n                {beforeStr}\r\n                <span className=\"text-danger\">{inputValue}</span>\r\n                {afterStr}\r\n              </span> : <span>{name}</span>\r\n            }\r\n          </span>\r\n          {(_.isFunction(addDiyDom) && addDiyDom(itemData)) || null}\r\n        </span>\r\n      );\r\n      const treeNodeClassName = classnames({\r\n        [(_.isFunction(addDiyClass) && addDiyClass(itemData))]: (_.isFunction(addDiyClass) && addDiyClass(itemData)),\r\n        \"tree-node-item\": true,\r\n      });\r\n\r\n      const treeNodeProps = {\r\n        key: key,\r\n        searchKey: name,\r\n        title: title,\r\n        data: itemData,\r\n        disabled: itemData.disabled,\r\n        disableCheckbox: itemData.disableCheckbox,\r\n        className: treeNodeClassName\r\n      };\r\n      if (item.items) {\r\n        return (\r\n          <TreeNode {...treeNodeProps}>\r\n            {this.renderTreeNode(_.assign({}, config, {\r\n              treeData: item.items\r\n            }))}\r\n          </TreeNode>\r\n        );\r\n      }\r\n      return <TreeNode {...treeNodeProps} />;\r\n    });\r\n  };\r\n  render() {\r\n    // render TreeNode\r\n    // 简化变量名\r\n    let { treeData, showSearch, ...extra } = this.props;\r\n    const { expandedKeys, autoExpandParent } = this.state;\r\n    // 过滤掉隐藏的节点\r\n    treeData = treeData.filter((item) => {\r\n      if (!item.hidden) {\r\n        this.treeList.push({ // 保存一份 tree 数据的 list(非树形结构)\r\n          id: item.id,\r\n          name: item.name\r\n        });\r\n      }\r\n      return !item.hidden;\r\n    });\r\n    treeData = Util.toTreeData(treeData);\r\n    this.treeDataCopy = treeData; // 将处理成树形结构的数据保存一份在实例上，搜索时需要用到\r\n\r\n    const props = {\r\n      onExpand: this.onExpand,\r\n      expandedKeys: expandedKeys,\r\n      autoExpandParent: autoExpandParent,\r\n      onSelect: this.onSelect,\r\n      onRightClick: this.onRightClick, // 如果 props 中设置了 rightable 为 true 时则传入右键事件, 默认不传入\r\n      onDrop: this.onDrop\r\n    };\r\n\r\n    const treeNode = this.renderTreeNode({\r\n      treeData\r\n    });\r\n    return (\r\n      <div className={`tree-content ${!showSearch ? 'tree-content-without-search' : ''}`}>\r\n        {showSearch && <Input placeholder=\"搜索节点\" onChange={this.handleChange} size=\"small\" />}\r\n        <Tree {...extra} {...props}>\r\n          {treeNode}\r\n        </Tree>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSearchTreeComponent.propTypes = {\r\n  title: PropTypes.oneOfType([\r\n    PropTypes.element,\r\n    PropTypes.string\r\n  ]),\r\n  treeData: PropTypes.oneOfType([\r\n    PropTypes.array,\r\n    MobxPropTypes.observableArray\r\n  ]).isRequired,\r\n  showSearch: PropTypes.bool,\r\n  rightable: PropTypes.bool,\r\n  onAddNode: PropTypes.func,\r\n  onModNode: PropTypes.func,\r\n  onDelNode: PropTypes.func,\r\n  onRightClick: PropTypes.func,\r\n  onItemClick: PropTypes.func,\r\n  treeNodeConfig: PropTypes.object,\r\n};\r\n\r\nSearchTreeComponent.defaultProps = {\r\n  // ================== Custom-Tree-props ==================\r\n  showSearch: true,\r\n  rightable: false, // 是否开启右键点击事件\r\n  onAddNode: () => { },\r\n  onModNode: () => { },\r\n  onDelNode: () => { },\r\n  onOpen: () => { },\r\n  // ================ Custom-TreeNode-props ================\r\n  // 以下属性均要加到每个节点数据中,而不是直接加在Tree组件的props中\r\n  treeNodeConfig: { // 给每个树节点扩展自定义配置\r\n    addDiyClass: () => { }, // 给每个节点添加自定义样式类, 要求函数返回值为 string\r\n    addDiyDom: () => { }, // 给每个节点追加自定义内容, 要求函数返回值为 ReactNode\r\n  },\r\n  // =================== Ant-Tree-props ====================\r\n  // 蚂蚁提供的配置项\r\n  treeData: [],\r\n  showLine: true, // 默认显示连线\r\n  onSelect: () => { },\r\n  onExpand: () => { },\r\n  onDrop: () => { },\r\n  onContextMenuClick: () => { } // 右键菜单时间\r\n};\r\n\r\nexport default SearchTreeComponent;\r\n","export { default as msgCenter } from './MsgCenter';\r\nexport { default as IndexedDB } from './IndexedDB';\r\nexport { default as Util } from './util';\r\nexport { default as API } from './API'\r\n","const domain = {\r\n    auth: `https://serverless-functions.esop-fe.now.sh`,\r\n\r\n};\r\n\r\nconst ApiConfig = {\r\n    domain\r\n};\r\n\r\nmodule.exports = ApiConfig;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tree\":\"tree-M_Yh1CDZ\",\"header\":\"header-2awlgQLB\",\"simple-tree\":\"simple-tree-2y38ZZZ8\"};"],"sourceRoot":""}