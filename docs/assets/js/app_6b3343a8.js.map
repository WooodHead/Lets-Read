{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///delegated ./node_modules/_prop-types@15.7.2@prop-types/index.js from dll-reference lib_3eaabf2e","webpack:///delegated ./node_modules/_react@16.3.1@react/index.js from dll-reference lib_3eaabf2e","webpack:///delegated ./node_modules/_mobx@3.1.8@mobx/lib/mobx.js from dll-reference lib_3eaabf2e","webpack:///delegated ./node_modules/_mobx-react@4.4.3@mobx-react/index.module.js from dll-reference lib_3eaabf2e","webpack:///delegated ./node_modules/_react-router-dom@4.3.1@react-router-dom/es/index.js from dll-reference lib_3eaabf2e","webpack:///delegated ./node_modules/_fbjs@0.8.17@fbjs/lib/ExecutionEnvironment.js from dll-reference lib_3eaabf2e","webpack:///delegated ./node_modules/_warning@4.0.3@warning/warning.js from dll-reference lib_3eaabf2e","webpack:///external \"lib_3eaabf2e\"","webpack:///delegated ./node_modules/_object-assign@4.1.1@object-assign/index.js from dll-reference lib_3eaabf2e","webpack:///./app/Router/index.jsx","webpack:///./app/containers/Main/index.jsx","webpack:///./app/containers/Main/readList.js","webpack:///./app/containers/Main/index.scss","webpack:///./app/index.js","webpack:///./node_modules/_moment@2.24.0@moment/locale sync ^\\.\\/.*$","webpack:///delegated ./node_modules/_fbjs@0.8.17@fbjs/lib/emptyObject.js from dll-reference lib_3eaabf2e","webpack:///delegated ./node_modules/_fbjs@0.8.17@fbjs/lib/invariant.js from dll-reference lib_3eaabf2e","webpack:///delegated ./node_modules/_fbjs@0.8.17@fbjs/lib/emptyFunction.js from dll-reference lib_3eaabf2e","webpack:///delegated ./node_modules/_react-dom@16.3.3@react-dom/index.js from dll-reference lib_3eaabf2e","webpack:///./app/containers/markdownList sync ^\\.\\/.*$","webpack:///./app/containers/markdownList/read-1-1.md","webpack:///./app/containers/markdownList/read-2-1.md","webpack:///./app/containers/markdownList/read-3-1.md","webpack:///./app/containers/markdownList/read-3-2.md","webpack:///./app/containers/markdownList/read-4-1.md","webpack:///./app/styles/index.scss","webpack:///delegated ./node_modules/_webpack@4.26.0@webpack/buildin/global.js from dll-reference lib_3eaabf2e"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","lib_3eaabf2e","RootComponent","path","exact","render","props","React","Component","toolbar","h1","h2","h3","h4","img","link","code","preview","expand","undo","redo","save","subfield","Main","state","selectData","spinning","handleChange","setState","handleSelect","renderIframe","src","width","height","image","type","theme","description","handleOpen","open","handleShrink","handleExpand","this","md","className","styles","root","span","treeData","readList","rightable","onOpen","onSelect","onClick","require","default","buildData","forEach","item","children","_","omit","list","moment","locale","useStrict","ReactDOM","zhCN","document","getElementById","onload","RootContainer","map","webpackContext","req","id","webpackContextResolve","e","Error","keys","resolve"],"mappings":"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","file":"assets/js/app_6b3343a8.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([430,2,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = (__webpack_require__(36))(0);","module.exports = (__webpack_require__(36))(1);","module.exports = (__webpack_require__(36))(4);","module.exports = (__webpack_require__(36))(42);","module.exports = (__webpack_require__(36))(56);","module.exports = (__webpack_require__(36))(46);","module.exports = (__webpack_require__(36))(2);","module.exports = lib_3eaabf2e;","module.exports = (__webpack_require__(36))(23);","import React from 'react';\nimport { Route, Switch, HashRouter } from 'react-router-dom';\nimport Main from 'containers/Main';\n\nclass RootComponent extends React.Component {\n    render() {\n        return (\n            <HashRouter>\n                <Switch>\n                    <Route path=\"/\" exact render={(props) => {\n                        return (\n                            <Main {...props} />\n                        );\n                    }} />\n                </Switch>\n            </HashRouter>\n        );\n    }\n}\n\nexport default RootComponent;\n","import React from 'react';\nimport { Row, Col, Spin, Empty, Icon } from 'antd';\n\nimport Editor from 'for-editor';\nimport { Tree } from 'components';\nimport { readList } from './readList';\n\nimport styles from './index.scss';\n\nconst toolbar = {\n    h1: false, // h1\n    h2: false, // h2\n    h3: false, // h3\n    h4: false, // h4\n    img: false, // 图片\n    link: false, // 链接\n    code: false, // 代码块\n    preview: false, // 预览\n    expand: true, // 全屏\n    /* v0.0.9 */\n    undo: false, // 撤销\n    redo: false, // 重做\n    save: false, // 保存\n    /* v0.2.3 */\n    subfield: false, // 单双栏模式\n};\n\nexport default class Main extends React.Component {\n    // api = new API('auth');\n    state = {\n        value: '',\n        selectData : {},\n        expand: true,\n        spinning: false\n    };\n\n    handleChange = (value) => {\n        this.setState({\n            value\n        });\n    };\n\n    handleSelect = (selectData) => {\n        this.setState({\n            selectData\n        });\n    };\n\n    renderIframe = (data) => {\n        const { link } = data;\n        if (!link) return <Empty image={<Icon type=\"smile\" theme=\"twoTone\" />} description='请选择一篇文章'/>;\n\n        return <iframe src={link} width='100%' height='100%'/>;\n    };\n\n    handleOpen = (data) => {\n        const { link } = data;\n        if (link) window.open(link);\n    };\n\n    // handleSaveAll = () => {\n    //     this.setState({ spinning: true });\n    //\n    //     dbUtil.queryData().then(async (data) => {\n    //         const allData = {};\n    //         data && data.forEach((item) => {\n    //             allData[item.id] = item;\n    //         });\n    //\n    //         try {\n    //             await this.api.post(\"/api/message\", allData)\n    //         } catch (e) {\n    //             message.error(e.toString());\n    //         }\n    //\n    //         message.success(\"保存成功\");\n    //         this.setState({ spinning: false });\n    //\n    //     })\n    // };\n\n    // handleSave = async (value) => {\n    //     this.setState({ spinning: true });\n    //     const { id, pId } = this.state.selectData;\n    //     if (!id || id === pId) {\n    //         message.error('选择一篇文章呦');\n    //         return;\n    //     }\n    //\n    //     let newData = {\n    //         id,\n    //         value,\n    //         date: +new Date()\n    //     };\n    //\n    //     try {\n    //         await this.api.post(\"/api/message\", { [id]: newData });\n    //     } catch (e) {\n    //         message.error(e.toString());\n    //     }\n    //\n    //     this.setState({ spinning: false });\n    //\n    //     dbUtil.queryData().then((data) => {\n    //         let currentData = _.find(data, ['id', id]);\n    //\n    //         if (currentData) {\n    //             dbUtil.updateData(newData).then(() => {\n    //                 message.success('保存成功');\n    //                 this.editNode.setState({ preview: true});\n    //             });\n    //         } else {\n    //             dbUtil.insertData(newData).then(() => {\n    //                 message.success('保存成功');\n    //                 this.editNode.setState({ preview: true});\n    //             });\n    //         }\n    //     });\n    // };\n\n    // produceJson = () => {\n    //     dbUtil.queryData().then((data) => {\n    //         let file = new File([JSON.stringify(data)], `read.json`, {type: \"text/plain;charset=utf-8\"});\n    //\n    //         saveAs(file);\n    //     });\n    // };\n\n    handleShrink = () => {\n        this.setState({ expand: false });\n    };\n    handleExpand = () => {\n        this.setState({ expand: true });\n    };\n\n    render() {\n        const { selectData, expand, spinning } = this.state;\n        const { link, md } = selectData;\n\n        return (\n            <Spin spinning={spinning}>\n                <Row className={styles.root}>\n                    <Col span={expand ? 3 : 1}>\n                        <Tree treeData={readList} rightable onOpen={this.handleOpen} onSelect={this.handleSelect}/>\n                        {\n                            expand ? <span className='expand' onClick={this.handleShrink}>&lt;</span> : <span className='expand' onClick={this.handleExpand}>&gt;</span>\n                        }\n                    </Col>\n                    <Col span={expand ? 11 : 13}>\n                        { this.renderIframe(selectData) }\n                    </Col>\n                    <Col span={10}>\n                        {\n                            !link ? null : <Editor preview toolbar={toolbar} value={require(`containers/markdownList/${md}`).default} className=\"editor\"/>\n                        }\n                    </Col>\n                </Row>\n            </Spin>\n        );\n    }\n}\n","import _ from 'lodash';\n/**\n * 文章列表维护再次\n * ⚠️id 必须唯一性 pId指向父级\n * 分组：\n *     id: 1        js\n *     id: 2        css\n *     id: 3        性能方面\n *     id: 4        设计模式\n *     id: 5        node\n */\n\nconst list = [{\n    \"id\": \"1\",\n    \"name\": \"js\",\n    \"disabledContext\": true,\n    \"pId\": \"1\",\n    children: [{\n        \"id\": \"1-1\",\n        \"name\": \"react-router「前端进阶」彻底弄懂前端路由\",\n        \"pId\": \"1\",\n        \"contextMenuKeys\": [\"open\"],\n        \"link\": \"https://juejin.im/post/5d2d19ccf265da1b7f29b05f\",\n        \"md\": \"read-1-1.md\"       // TODO md文件名以read-{id}.md为准,文件统一放在 markdownList 目录下\n    }]\n}, {\n    \"id\": \"2\",\n    \"name\": \"css\",\n    \"disabledContext\": true,\n    \"pId\": \"2\",\n    children: [{\n        \"id\": \"2-1\",\n        \"name\": \"CSS 变量教程\",\n        \"pId\": \"2\",\n        \"contextMenuKeys\": [\"open\"],\n        \"link\": \"https://www.ruanyifeng.com/blog/2017/05/css-variables.html\",\n        \"md\": \"read-2-1.md\"\n    }]\n}, {\n    \"id\": \"3\",\n    \"name\": \"性能方面\",\n    \"disabledContext\": true,\n    \"pId\": \"3\",\n    children: [{\n        \"id\": \"3-1\",\n        \"name\": \"「中高级前端」高性能渲染十万条数据\",\n        \"pId\": \"3\",\n        \"contextMenuKeys\": [\"open\"],\n        \"link\": \"https://juejin.im/post/5d76f469f265da039a28aff7\",\n        \"md\": \"read-3-1.md\"\n    },{\n        \"id\": \"3-2\",\n        \"name\": \"diff算法\",\n        \"pId\": \"3\",\n        \"contextMenuKeys\": [\"open\"],\n        \"link\": \"https://www.jianshu.com/p/398e63dc1969\",\n        \"md\": \"read-3-2.md\"\n    }]\n}, {\n    \"id\": \"4\",\n    \"name\": \"设计模式\",\n    \"disabledContext\": true,\n    \"pId\": \"4\",\n    children: [{\n        \"id\": \"4-1\",\n        \"name\": \"函数组合\",\n        \"pId\": \"4\",\n        \"contextMenuKeys\": [\"open\"],\n        \"link\": \"https://juejin.im/post/5d50bfebf265da03cb122b6f\",\n        \"md\": \"read-4-1.md\"\n    }]\n}, {\n    \"id\": \"5\",\n    \"name\": \"node\",\n    \"disabledContext\": true,\n    \"pId\": \"5\"\n}];\n\nconst buildData = function (data, result) {\n    data.forEach((item) => {\n        if (item.children) {\n            result.push(_.omit(item, 'children'));\n            buildData(item.children, result);\n        } else {\n            result.push(item);\n        }\n    });\n    return result;\n};\n\nconst readList = buildData(list, []);\n\n\nexport {\n    readList\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"root-23a6csI5\"};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { LocaleProvider } from 'antd';\nimport zhCN from 'antd/lib/locale-provider/zh_CN';\n\nimport { useStrict } from 'mobx';\nimport { AppContainer } from 'react-hot-loader';\nimport moment from 'moment';\n\n// 推荐在入口文件全局设置 locale\nimport 'moment/locale/zh-cn';\nimport RootContainer from './Router';\n\nmoment.locale('zh-cn');\n\nrequire('normalize.css/normalize.css');\nrequire(\"styles/index.scss\"); // 引入框架样式文件\n\n// 引入自定义icon\n// require('styles/core/tools/iconfont/font/iconfont');\n// require('styles/core/tools/iconfont/index.css'); // 引入覆盖font/iconfont.less文件样式类 文件\n\nuseStrict(true); // 强制所有对mobx-store的更改都得通过action\n\n// IndexedDB.initIndexedDB(() => {\n//     setTimeout(() => {\n//         msgCenter.publish('initialDbSuccess', true)\n//     }, 300)\n// });\n\nconst render = (Component) => {\n    ReactDOM.render((\n        <AppContainer>\n            <LocaleProvider locale={zhCN}>\n                <Component/>\n            </LocaleProvider>\n        </AppContainer>\n    ), document.getElementById('app'));\n};\n\nwindow.onload = function () {\n    // load app\n    render(RootContainer);\n};\n\n\nif (module.hot) {\n    // when HMR is enabled. react-hot-loader will reload app.\n    module.hot.accept('./Router', () => {\n        const NextRootContainer = require(\"./Router\").default;\n        render(NextRootContainer);\n    });\n\n    // TODO This is a react-router bug when work with react-hot-loader\n    // override the console.error, and filter the warning out.\n    // It's only included when HMR is enabled.\n    // disabled log error 'You cannot change <Router routes>;'\n    const orgError = console.error;\n    console.error = (...args) => {\n        if (args && args.length === 1 && typeof args[0] === \"string\" && args[0].indexOf('You cannot change <Router routes>;') > -1) {\n            // React route changed\n        } else {\n            // Log the error as normally\n            orgError.apply(console, args);\n        }\n    };\n}\n","var map = {\n\t\"./af\": 240,\n\t\"./af.js\": 240,\n\t\"./ar\": 241,\n\t\"./ar-dz\": 242,\n\t\"./ar-dz.js\": 242,\n\t\"./ar-kw\": 243,\n\t\"./ar-kw.js\": 243,\n\t\"./ar-ly\": 244,\n\t\"./ar-ly.js\": 244,\n\t\"./ar-ma\": 245,\n\t\"./ar-ma.js\": 245,\n\t\"./ar-sa\": 246,\n\t\"./ar-sa.js\": 246,\n\t\"./ar-tn\": 247,\n\t\"./ar-tn.js\": 247,\n\t\"./ar.js\": 241,\n\t\"./az\": 248,\n\t\"./az.js\": 248,\n\t\"./be\": 249,\n\t\"./be.js\": 249,\n\t\"./bg\": 250,\n\t\"./bg.js\": 250,\n\t\"./bm\": 251,\n\t\"./bm.js\": 251,\n\t\"./bn\": 252,\n\t\"./bn.js\": 252,\n\t\"./bo\": 253,\n\t\"./bo.js\": 253,\n\t\"./br\": 254,\n\t\"./br.js\": 254,\n\t\"./bs\": 255,\n\t\"./bs.js\": 255,\n\t\"./ca\": 256,\n\t\"./ca.js\": 256,\n\t\"./cs\": 257,\n\t\"./cs.js\": 257,\n\t\"./cv\": 258,\n\t\"./cv.js\": 258,\n\t\"./cy\": 259,\n\t\"./cy.js\": 259,\n\t\"./da\": 260,\n\t\"./da.js\": 260,\n\t\"./de\": 261,\n\t\"./de-at\": 262,\n\t\"./de-at.js\": 262,\n\t\"./de-ch\": 263,\n\t\"./de-ch.js\": 263,\n\t\"./de.js\": 261,\n\t\"./dv\": 264,\n\t\"./dv.js\": 264,\n\t\"./el\": 265,\n\t\"./el.js\": 265,\n\t\"./en-SG\": 266,\n\t\"./en-SG.js\": 266,\n\t\"./en-au\": 267,\n\t\"./en-au.js\": 267,\n\t\"./en-ca\": 268,\n\t\"./en-ca.js\": 268,\n\t\"./en-gb\": 269,\n\t\"./en-gb.js\": 269,\n\t\"./en-ie\": 270,\n\t\"./en-ie.js\": 270,\n\t\"./en-il\": 271,\n\t\"./en-il.js\": 271,\n\t\"./en-nz\": 272,\n\t\"./en-nz.js\": 272,\n\t\"./eo\": 273,\n\t\"./eo.js\": 273,\n\t\"./es\": 274,\n\t\"./es-do\": 275,\n\t\"./es-do.js\": 275,\n\t\"./es-us\": 276,\n\t\"./es-us.js\": 276,\n\t\"./es.js\": 274,\n\t\"./et\": 277,\n\t\"./et.js\": 277,\n\t\"./eu\": 278,\n\t\"./eu.js\": 278,\n\t\"./fa\": 279,\n\t\"./fa.js\": 279,\n\t\"./fi\": 280,\n\t\"./fi.js\": 280,\n\t\"./fo\": 281,\n\t\"./fo.js\": 281,\n\t\"./fr\": 282,\n\t\"./fr-ca\": 283,\n\t\"./fr-ca.js\": 283,\n\t\"./fr-ch\": 284,\n\t\"./fr-ch.js\": 284,\n\t\"./fr.js\": 282,\n\t\"./fy\": 285,\n\t\"./fy.js\": 285,\n\t\"./ga\": 286,\n\t\"./ga.js\": 286,\n\t\"./gd\": 287,\n\t\"./gd.js\": 287,\n\t\"./gl\": 288,\n\t\"./gl.js\": 288,\n\t\"./gom-latn\": 289,\n\t\"./gom-latn.js\": 289,\n\t\"./gu\": 290,\n\t\"./gu.js\": 290,\n\t\"./he\": 291,\n\t\"./he.js\": 291,\n\t\"./hi\": 292,\n\t\"./hi.js\": 292,\n\t\"./hr\": 293,\n\t\"./hr.js\": 293,\n\t\"./hu\": 294,\n\t\"./hu.js\": 294,\n\t\"./hy-am\": 295,\n\t\"./hy-am.js\": 295,\n\t\"./id\": 296,\n\t\"./id.js\": 296,\n\t\"./is\": 297,\n\t\"./is.js\": 297,\n\t\"./it\": 298,\n\t\"./it-ch\": 299,\n\t\"./it-ch.js\": 299,\n\t\"./it.js\": 298,\n\t\"./ja\": 300,\n\t\"./ja.js\": 300,\n\t\"./jv\": 301,\n\t\"./jv.js\": 301,\n\t\"./ka\": 302,\n\t\"./ka.js\": 302,\n\t\"./kk\": 303,\n\t\"./kk.js\": 303,\n\t\"./km\": 304,\n\t\"./km.js\": 304,\n\t\"./kn\": 305,\n\t\"./kn.js\": 305,\n\t\"./ko\": 306,\n\t\"./ko.js\": 306,\n\t\"./ku\": 307,\n\t\"./ku.js\": 307,\n\t\"./ky\": 308,\n\t\"./ky.js\": 308,\n\t\"./lb\": 309,\n\t\"./lb.js\": 309,\n\t\"./lo\": 310,\n\t\"./lo.js\": 310,\n\t\"./lt\": 311,\n\t\"./lt.js\": 311,\n\t\"./lv\": 312,\n\t\"./lv.js\": 312,\n\t\"./me\": 313,\n\t\"./me.js\": 313,\n\t\"./mi\": 314,\n\t\"./mi.js\": 314,\n\t\"./mk\": 315,\n\t\"./mk.js\": 315,\n\t\"./ml\": 316,\n\t\"./ml.js\": 316,\n\t\"./mn\": 317,\n\t\"./mn.js\": 317,\n\t\"./mr\": 318,\n\t\"./mr.js\": 318,\n\t\"./ms\": 319,\n\t\"./ms-my\": 320,\n\t\"./ms-my.js\": 320,\n\t\"./ms.js\": 319,\n\t\"./mt\": 321,\n\t\"./mt.js\": 321,\n\t\"./my\": 322,\n\t\"./my.js\": 322,\n\t\"./nb\": 323,\n\t\"./nb.js\": 323,\n\t\"./ne\": 324,\n\t\"./ne.js\": 324,\n\t\"./nl\": 325,\n\t\"./nl-be\": 326,\n\t\"./nl-be.js\": 326,\n\t\"./nl.js\": 325,\n\t\"./nn\": 327,\n\t\"./nn.js\": 327,\n\t\"./pa-in\": 328,\n\t\"./pa-in.js\": 328,\n\t\"./pl\": 329,\n\t\"./pl.js\": 329,\n\t\"./pt\": 330,\n\t\"./pt-br\": 331,\n\t\"./pt-br.js\": 331,\n\t\"./pt.js\": 330,\n\t\"./ro\": 332,\n\t\"./ro.js\": 332,\n\t\"./ru\": 333,\n\t\"./ru.js\": 333,\n\t\"./sd\": 334,\n\t\"./sd.js\": 334,\n\t\"./se\": 335,\n\t\"./se.js\": 335,\n\t\"./si\": 336,\n\t\"./si.js\": 336,\n\t\"./sk\": 337,\n\t\"./sk.js\": 337,\n\t\"./sl\": 338,\n\t\"./sl.js\": 338,\n\t\"./sq\": 339,\n\t\"./sq.js\": 339,\n\t\"./sr\": 340,\n\t\"./sr-cyrl\": 341,\n\t\"./sr-cyrl.js\": 341,\n\t\"./sr.js\": 340,\n\t\"./ss\": 342,\n\t\"./ss.js\": 342,\n\t\"./sv\": 343,\n\t\"./sv.js\": 343,\n\t\"./sw\": 344,\n\t\"./sw.js\": 344,\n\t\"./ta\": 345,\n\t\"./ta.js\": 345,\n\t\"./te\": 346,\n\t\"./te.js\": 346,\n\t\"./tet\": 347,\n\t\"./tet.js\": 347,\n\t\"./tg\": 348,\n\t\"./tg.js\": 348,\n\t\"./th\": 349,\n\t\"./th.js\": 349,\n\t\"./tl-ph\": 350,\n\t\"./tl-ph.js\": 350,\n\t\"./tlh\": 351,\n\t\"./tlh.js\": 351,\n\t\"./tr\": 352,\n\t\"./tr.js\": 352,\n\t\"./tzl\": 353,\n\t\"./tzl.js\": 353,\n\t\"./tzm\": 354,\n\t\"./tzm-latn\": 355,\n\t\"./tzm-latn.js\": 355,\n\t\"./tzm.js\": 354,\n\t\"./ug-cn\": 356,\n\t\"./ug-cn.js\": 356,\n\t\"./uk\": 357,\n\t\"./uk.js\": 357,\n\t\"./ur\": 358,\n\t\"./ur.js\": 358,\n\t\"./uz\": 359,\n\t\"./uz-latn\": 360,\n\t\"./uz-latn.js\": 360,\n\t\"./uz.js\": 359,\n\t\"./vi\": 361,\n\t\"./vi.js\": 361,\n\t\"./x-pseudo\": 362,\n\t\"./x-pseudo.js\": 362,\n\t\"./yo\": 363,\n\t\"./yo.js\": 363,\n\t\"./zh-cn\": 167,\n\t\"./zh-cn.js\": 167,\n\t\"./zh-hk\": 364,\n\t\"./zh-hk.js\": 364,\n\t\"./zh-tw\": 365,\n\t\"./zh-tw.js\": 365\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 637;","module.exports = (__webpack_require__(36))(24);","module.exports = (__webpack_require__(36))(45);","module.exports = (__webpack_require__(36))(25);","module.exports = (__webpack_require__(36))(11);","var map = {\n\t\"./read-1-1.md\": 843,\n\t\"./read-2-1.md\": 844,\n\t\"./read-3-1.md\": 845,\n\t\"./read-3-2.md\": 846,\n\t\"./read-4-1.md\": 847\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 842;","export default \"<h2 id=\\\"什么是前端路由\\\">什么是前端路由</h2>\\n<p>简单的说，就是在保证只有一个 HTML 页面，且与用户交互时不刷新和跳转页面的同时，为 SPA 中的每个视图展示形式匹配一个特殊的 url。在刷新、前进、后退和SEO时均通过这个特殊的 url 来实现。</p>\\n<p>为实现这一目标，我们需要做到以下二点：</p>\\n<ol>\\n<li><p>改变 url 且不让浏览器像服务器发送请求；</p>\\n</li>\\n<li><p>可以监听到 url 的变化</p>\\n</li>\\n</ol>\\n<p>目前有两种模式，分别是 <strong>hash 模式和 history 模式</strong></p>\\n<h3 id=\\\"hash模式\\\">hash模式</h3>\\n<p>这里的 hash 就是指 url 后的 # 号以及后面的字符。比如说 &quot;<a href=\\\"http://www.baidu.com/#hashhash&quot;\\\">www.baidu.com/#hashhash&quot;</a> ，其中 &quot;#hashhash&quot; 就是我们期望的 hash 值。</p>\\n<p>由于 hash 值的变化 <code>不会导致浏览器像服务器发送请求</code>, 而且 hash 的改变会触发 <code>hashchange</code>事件，浏览器的前进后退也能对其进行控制，所以在 H5 的 history 模式出现之前，基本都是使用 hash 模式来实现前端路由。</p>\\n<ul>\\n<li><strong><em>手动实现hash路由</em></strong></li>\\n</ul>\\n<pre><code class=\\\"language-js\\\"><span class=\\\"hljs-keyword\\\">class</span> HashRouter {\\n    <span class=\\\"hljs-keyword\\\">constructor</span>(<span class=\\\"hljs-params\\\"></span>){\\n        <span class=\\\"hljs-comment\\\">// 初始化路由</span>\\n        <span class=\\\"hljs-keyword\\\">this</span>.routers = {};\\n\\n        <span class=\\\"hljs-comment\\\">// 绑定hash监听事件</span>\\n        <span class=\\\"hljs-built_in\\\">window</span>.addEventListener(<span class=\\\"hljs-string\\\">'hashchange'</span>, <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> {\\n            <span class=\\\"hljs-keyword\\\">this</span>.load()\\n        })\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">// 注册路由</span>\\n    register = <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">hash, cb</span>) =&gt;</span> {\\n        <span class=\\\"hljs-keyword\\\">this</span>.routers[hash] = cb;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">// 注册首页路由</span>\\n    registerIndex = <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">cb</span>) =&gt;</span> {\\n        <span class=\\\"hljs-keyword\\\">this</span>.routers[<span class=\\\"hljs-string\\\">'index'</span>] = cb;\\n    }\\n\\n    load = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> {\\n        <span class=\\\"hljs-keyword\\\">let</span> hash = location.hash.slice(<span class=\\\"hljs-number\\\">1</span>);\\n        <span class=\\\"hljs-keyword\\\">let</span> handle;\\n\\n        <span class=\\\"hljs-keyword\\\">if</span> (!hash) {  <span class=\\\"hljs-comment\\\">// 说明是主页</span>\\n            handle = <span class=\\\"hljs-keyword\\\">this</span>.routers.index;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            handle = <span class=\\\"hljs-keyword\\\">this</span>.routers[hash];\\n        }\\n\\n        handle();\\n    }\\n\\n}</code></pre>\\n<pre><code class=\\\"language-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">body</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"nav\\\"</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">\\\"#/page1\\\"</span>&gt;</span>page1<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">\\\"#/page2\\\"</span>&gt;</span>page2<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">\\\"#/page3\\\"</span>&gt;</span>page3<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">\\\"#/page4\\\"</span>&gt;</span>page4<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">\\\"#/page5\\\"</span>&gt;</span>page5<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"container\\\"</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">body</span>&gt;</span></code></pre>\\n<p><strong>使用</strong></p>\\n<pre><code class=\\\"language-js\\\"><span class=\\\"hljs-keyword\\\">let</span> router = <span class=\\\"hljs-keyword\\\">new</span> HashRouter();\\n<span class=\\\"hljs-keyword\\\">let</span> container = <span class=\\\"hljs-built_in\\\">document</span>.getElementById(<span class=\\\"hljs-string\\\">'container'</span>);\\n\\n<span class=\\\"hljs-comment\\\">//注册首页回调函数</span>\\nrouter.registerIndex(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span>=&gt;</span> container.innerHTML = <span class=\\\"hljs-string\\\">'我是首页'</span>);\\n\\n<span class=\\\"hljs-comment\\\">//注册其他视图回到函数</span>\\nrouter.register(<span class=\\\"hljs-string\\\">'/page1'</span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span>=&gt;</span> container.innerHTML = <span class=\\\"hljs-string\\\">'我是page1'</span>);\\nrouter.register(<span class=\\\"hljs-string\\\">'/page2'</span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span>=&gt;</span> container.innerHTML = <span class=\\\"hljs-string\\\">'我是page2'</span>);\\nrouter.register(<span class=\\\"hljs-string\\\">'/page3'</span>,<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span>=&gt;</span> container.innerHTML = <span class=\\\"hljs-string\\\">'我是page3'</span>);\\n\\n<span class=\\\"hljs-comment\\\">// 加载页面</span>\\nrouter.load();</code></pre>\\n<h3 id=\\\"hash模式-1\\\">hash模式</h3>\\n<p>在 HTML5 的规范中，history 新增了以下几个 API：</p>\\n<pre><code class=\\\"language-js\\\"><span class=\\\"hljs-keyword\\\">history</span>.pushState<span class=\\\"hljs-params\\\">()</span>;         <span class=\\\"hljs-string\\\">//</span> 添加新的状态到历史状态栈\\n<span class=\\\"hljs-keyword\\\">history</span>.replaceState<span class=\\\"hljs-params\\\">()</span>;      <span class=\\\"hljs-string\\\">//</span> 用新的状态代替当前状态\\n<span class=\\\"hljs-keyword\\\">history</span>.state                <span class=\\\"hljs-string\\\">//</span> 返回当前状态对象</code></pre>\\n<p>由于 history.pushState() 和 history.replaceState() 可以改变 url 同时，不会刷新页面，所以在 HTML5 中的 histroy 具备了实现前端路由的能力</p>\\n<ul>\\n<li>hash 路由通过监听haschange事件进行跳转路由的。</li>\\n<li>history的改变并不会触发任何事件，所以我们无法直接监听 history 的改变而做出相应的改变.。</li>\\n</ul>\\n<p>所以我们换个思路，将这些方式进行拦截，变相的监听history的变化。</p>\\n<blockquote>\\n<ol>\\n<li>点击浏览器的前进或后退按钮</li>\\n<li>点击a标签</li>\\n<li>在 JS 代码中触发 history.pushState 函数</li>\\n<li>在 JS 代码中触发 history.replaceState 函数</li>\\n</ol>\\n</blockquote>\\n<ul>\\n<li><p><strong><em>手动实现history路由</em></strong></p>\\n<pre><code class=\\\"language-js\\\"><span class=\\\"hljs-class\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title\\\">HistoryRouter</span> </span>{\\n  <span class=\\\"hljs-keyword\\\">constructor</span>(){\\n      <span class=\\\"hljs-keyword\\\">this</span>.routers = {};\\n      <span class=\\\"hljs-keyword\\\">this</span>.listenPopState();\\n      <span class=\\\"hljs-keyword\\\">this</span>.listenLink();\\n  }\\n\\n  <span class=\\\"hljs-comment\\\">// 全局监听a标签</span>\\n  listenLink = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> {\\n      <span class=\\\"hljs-built_in\\\">window</span>.addEventListener(<span class=\\\"hljs-string\\\">'click'</span>, (e) =&gt; {\\n          <span class=\\\"hljs-keyword\\\">let</span> target = e.target;\\n\\n          <span class=\\\"hljs-keyword\\\">if</span> (target.tagName.toUpperCase() === <span class=\\\"hljs-string\\\">'A'</span> &amp;&amp; target.getAttribute(<span class=\\\"hljs-string\\\">'href'</span>)) {\\n              e.preventDefault();  <span class=\\\"hljs-comment\\\">// 组织默认行为</span>\\n              <span class=\\\"hljs-keyword\\\">this</span>.assign(target.getAttribute(<span class=\\\"hljs-string\\\">'href'</span>));\\n          }\\n      })\\n  }\\n\\n  <span class=\\\"hljs-comment\\\">//用于首次进入页面时调用</span>\\n  load(){\\n      <span class=\\\"hljs-keyword\\\">let</span> path = location.pathname;\\n      <span class=\\\"hljs-keyword\\\">this</span>.dealPathHandler(path)\\n  }\\n\\n  <span class=\\\"hljs-comment\\\">//用于注册每个视图</span>\\n  register(path,callback = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\"></span>)</span>{}){\\n      <span class=\\\"hljs-keyword\\\">this</span>.routers[path] = callback;\\n  }\\n  <span class=\\\"hljs-comment\\\">//用于注册首页</span>\\n  registerIndex(callback = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\"></span>)</span>{}){\\n      <span class=\\\"hljs-keyword\\\">this</span>.routers[<span class=\\\"hljs-string\\\">'/'</span>] = callback;\\n  }\\n  <span class=\\\"hljs-comment\\\">//用于处理视图未找到的情况</span>\\n  registerNotFound(callback = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\"></span>)</span>{}){\\n      <span class=\\\"hljs-keyword\\\">this</span>.routers[<span class=\\\"hljs-string\\\">'404'</span>] = callback;\\n  }\\n\\n  <span class=\\\"hljs-comment\\\">// 跳转到path</span>\\n  assign = <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">path</span>) =&gt;</span> {\\n      history.pushState({path}, <span class=\\\"hljs-literal\\\">null</span>, path);\\n      <span class=\\\"hljs-keyword\\\">this</span>.dealPathHandler(path);\\n  }\\n\\n   <span class=\\\"hljs-comment\\\">//替换为path</span>\\n  replace(path){\\n      history.replaceState({path},<span class=\\\"hljs-literal\\\">null</span>,path);\\n      <span class=\\\"hljs-keyword\\\">this</span>.dealPathHandler(path)\\n  }\\n\\n  <span class=\\\"hljs-comment\\\">//监听popstate</span>\\n  listenPopState = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> {\\n      <span class=\\\"hljs-built_in\\\">window</span>.addEventListener(<span class=\\\"hljs-string\\\">'popstate'</span>, (e) =&gt; {\\n          <span class=\\\"hljs-keyword\\\">let</span> state = e.state || {};\\n          <span class=\\\"hljs-keyword\\\">let</span> path = state.path || <span class=\\\"hljs-string\\\">''</span>;\\n          <span class=\\\"hljs-keyword\\\">this</span>.dealPathHandler(path);\\n      })\\n  }\\n\\n  <span class=\\\"hljs-comment\\\">// 处理path跳转页面</span>\\n  dealPathHandler = <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">path</span>) =&gt;</span> {\\n      <span class=\\\"hljs-keyword\\\">let</span> handle;\\n      <span class=\\\"hljs-keyword\\\">if</span> (!<span class=\\\"hljs-keyword\\\">this</span>.routers[path]) {  <span class=\\\"hljs-comment\\\">// 没有对应path</span>\\n          handle = <span class=\\\"hljs-keyword\\\">this</span>.routers[<span class=\\\"hljs-string\\\">'404'</span>] || <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\"></span>) </span>{};\\n      } <span class=\\\"hljs-keyword\\\">else</span> {\\n          <span class=\\\"hljs-comment\\\">// 对应path</span>\\n          handle = <span class=\\\"hljs-keyword\\\">this</span>.routers[path]\\n      }\\n\\n      handle.call(<span class=\\\"hljs-keyword\\\">this</span>);\\n\\n  }\\n}</code></pre>\\n</li>\\n</ul>\\n<p><strong>使用</strong></p>\\n<pre><code class=\\\"language-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">body</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"nav\\\"</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">\\\"/page1\\\"</span>&gt;</span>page1<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">\\\"/page2\\\"</span>&gt;</span>page2<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">\\\"/page3\\\"</span>&gt;</span>page3<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">\\\"/page4\\\"</span>&gt;</span>page4<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">\\\"/page5\\\"</span>&gt;</span>page5<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">button</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"btn\\\"</span>&gt;</span>page2<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">button</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">div</span> <span class=\\\"hljs-attr\\\">id</span>=<span class=\\\"hljs-string\\\">\\\"container\\\"</span>&gt;</span>\\n\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">div</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">body</span>&gt;</span></code></pre>\\n<pre><code class=\\\"language-js\\\">let router = <span class=\\\"hljs-keyword\\\">new</span> HistoryRouter();\\nlet container = <span class=\\\"hljs-built_in\\\">document</span>.getElementById(<span class=\\\"hljs-string\\\">'container'</span>);\\n\\n<span class=\\\"hljs-regexp\\\">//</span>注册首页回调函数\\nrouter.registerIndex(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> container.innerHTML = <span class=\\\"hljs-string\\\">'我是首页'</span>);\\n\\n<span class=\\\"hljs-regexp\\\">//</span>注册其他视图回到函数\\nrouter.register(<span class=\\\"hljs-string\\\">'/page1'</span>, <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> container.innerHTML = <span class=\\\"hljs-string\\\">'我是page1'</span>);\\nrouter.register(<span class=\\\"hljs-string\\\">'/page2'</span>, <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> container.innerHTML = <span class=\\\"hljs-string\\\">'我是page2'</span>);\\nrouter.register(<span class=\\\"hljs-string\\\">'/page3'</span>, <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> container.innerHTML = <span class=\\\"hljs-string\\\">'我是page3'</span>);\\nrouter.register(<span class=\\\"hljs-string\\\">'/page4'</span>, <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> {\\n    <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> Error(<span class=\\\"hljs-string\\\">'抛出一个异常'</span>)\\n});\\n\\n<span class=\\\"hljs-built_in\\\">document</span>.getElementById(<span class=\\\"hljs-string\\\">'btn'</span>).onclick = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> router.assign(<span class=\\\"hljs-string\\\">'/page2'</span>)\\n\\n\\n<span class=\\\"hljs-regexp\\\">//</span>注册未找到对应path值时的回调\\nrouter.registerNotFound(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> container.innerHTML = <span class=\\\"hljs-string\\\">'页面未找到'</span>);\\n<span class=\\\"hljs-regexp\\\">//</span>注册出现异常时的回调\\nrouter.registerError(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">(e)</span> =&gt;</span> container.innerHTML = <span class=\\\"hljs-string\\\">'页面异常，错误消息：&lt;br&gt;'</span> + e.message);\\n<span class=\\\"hljs-regexp\\\">//</span>加载页面\\nrouter.load();</code></pre>\\n<h2 id=\\\"hash、history如何抉择\\\">hash、history如何抉择</h2>\\n<p>hash 模式相比于 history 模式的优点：</p>\\n<ul>\\n<li>兼容性更好，可以兼容到IE8</li>\\n<li>无需服务端配合处理非单页的url地址</li>\\n</ul>\\n<p>hash 模式相比于 history 模式的缺点：</p>\\n<ul>\\n<li>看起来更丑</li>\\n<li>会导致锚点功能失效</li>\\n<li>相同 hash 值不会触发动作将记录加入到历史栈中，而 pushState 则可以</li>\\n</ul>\\n\"","export default \"<h2 id=\\\"一、变量的声明\\\">一、变量的声明</h2>\\n<pre><code class=\\\"language-css\\\"><span class=\\\"hljs-selector-pseudo\\\">:root</span> {\\n  <span class=\\\"hljs-attribute\\\">--w</span>: <span class=\\\"hljs-number\\\">100px</span>; <span class=\\\"hljs-comment\\\">/* 全局变量 */</span>\\n}</code></pre>\\n<h3 id=\\\"变量作用域\\\">变量作用域</h3>\\n<blockquote>\\n<p>同一个 CSS 变量，可以在多个选择器内声明。读取的时候，<strong>优先级</strong>最高的声明生效。这与 CSS 的<strong>&quot;层叠&quot;</strong>（cascade）规则是一致的。</p>\\n</blockquote>\\n<p>上面提到了全局变量。</p>\\n<pre><code class=\\\"language-css\\\"><span class=\\\"hljs-selector-class\\\">.container</span> {\\n  <span class=\\\"hljs-attribute\\\">--h</span>: <span class=\\\"hljs-number\\\">10px</span>;\\n  <span class=\\\"hljs-comment\\\">/* 局部变量\\n      只作用于拥有 .container类名的节点，\\n      以及该节点下的所有后辈节点。\\n  */</span>\\n}</code></pre>\\n<h2 id=\\\"二、var-函数\\\">二、var() 函数</h2>\\n<ul>\\n<li>它用于读取变量</li>\\n<li>可接受两个参数，第一个参数是作用域内的变量，第二个参数（可选）是第一个参数的默认值。</li>\\n<li>变量值只能作为属性值。</li>\\n</ul>\\n<h2 id=\\\"三、变量值的类型\\\">三、变量值的类型</h2>\\n<ul>\\n<li>类型<ul>\\n<li>字符串（&#39;hello world&#39;）不能是带单位带数字。</li>\\n<li>数字。</li>\\n<li>带单位的数字（1px, 30deg, ...）。</li>\\n</ul>\\n</li>\\n<li>运算规则<ul>\\n<li>字符串可以拼接。</li>\\n<li>数字运算只能用<code>calc</code>。</li>\\n</ul>\\n</li>\\n</ul>\\n<h2 id=\\\"五、响应式布局\\\">五、响应式布局</h2>\\n<p>变量可用于@media媒体查询。</p>\\n<h2 id=\\\"六、-与sass、less区别\\\">六、 与sass、less区别</h2>\\n<p>变量是动态的，sass、less是静态的，他们没法做到更新变量就刷新布局达到响应式的效果</p>\\n<h2 id=\\\"七、javascript-操作\\\">七、JavaScript 操作</h2>\\n<ul>\\n<li>可以通过改变css变量实现动画、主题等；例如<a href=\\\"https://esop-fed.github.io/ani-css\\\">ani-css首页的robot</a><h2 id=\\\"其他优秀文章\\\">其他优秀文章</h2>\\n<a href=\\\"https://www.zhangxinxu.com/wordpress/2016/11/css-css3-variables-var/\\\">小tips:了解CSS/CSS3原生变量var</a></li>\\n</ul>\\n\"","export default \"<h2 id=\\\"「中高级前端」高性能渲染十万条数据\\\">「中高级前端」高性能渲染十万条数据</h2>\\n<blockquote>\\n<p>本文探讨：当遇到大量数据时，如何才能在不卡主页面的情况下渲染数据，以及其背后的原理。以下比较了4种不同的方式：</p>\\n</blockquote>\\n<ol>\\n<li>暴力渲染</li>\\n<li>setTimeout</li>\\n<li>requestAnimationFrame</li>\\n<li>DocumentFragment</li>\\n</ol>\\n<h2 id=\\\"一、暴力渲染\\\">一、暴力渲染</h2>\\n<pre><code><span class=\\\"hljs-comment\\\">// 记录任务开始时间</span>\\n<span class=\\\"hljs-keyword\\\">let</span> now = <span class=\\\"hljs-built_in\\\">Date</span>.now();\\n<span class=\\\"hljs-comment\\\">// 插入十万条数据</span>\\n<span class=\\\"hljs-keyword\\\">const</span> total = <span class=\\\"hljs-number\\\">100000</span>;\\n<span class=\\\"hljs-comment\\\">// 获取容器</span>\\n<span class=\\\"hljs-keyword\\\">let</span> ul = <span class=\\\"hljs-built_in\\\">document</span>.getElementById(<span class=\\\"hljs-string\\\">'container'</span>);\\n<span class=\\\"hljs-comment\\\">// 将数据插入容器中</span>\\n<span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-keyword\\\">let</span> i = <span class=\\\"hljs-number\\\">0</span>; i &lt; total; i++) {\\n    <span class=\\\"hljs-keyword\\\">let</span> li = <span class=\\\"hljs-built_in\\\">document</span>.createElement(<span class=\\\"hljs-string\\\">'li'</span>);\\n    li.innerText = ~~(<span class=\\\"hljs-built_in\\\">Math</span>.random() * total)  <span class=\\\"hljs-comment\\\">// ~~</span>\\n    ul.appendChild(li);\\n}\\n\\n<span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-string\\\">'JS运行时间：'</span>,<span class=\\\"hljs-built_in\\\">Date</span>.now() - now);\\nsetTimeout(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span>=&gt;</span>{\\n  <span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-string\\\">'总运行时间：'</span>,<span class=\\\"hljs-built_in\\\">Date</span>.now() - now);\\n},<span class=\\\"hljs-number\\\">0</span>)\\n<span class=\\\"hljs-comment\\\">// print: JS运行时间： 187ms</span>\\n<span class=\\\"hljs-comment\\\">// print: 总运行时间： 2844ms</span></code></pre><blockquote>\\n<p>简单说明一下，为何两次console.log的结果时间差异巨大，并且是如何简单来统计JS运行时间和总渲染时间：</p>\\n</blockquote>\\n<blockquote>\\n<p>在 JS 的Event Loop中，当JS引擎所管理的执行栈中的事件以及所有微任务事件全部执行完后，才会触发渲染线程对页面进行渲染</p>\\n</blockquote>\\n<ul>\\n<li>第一个console.log的触发时间是在页面进行渲染之前，此时得到的间隔时间为JS运行所需要的时间</li>\\n<li>第二个console.log是放到 setTimeout 中的，它的触发时间是在渲染完成，在下一次Event Loop中执行的</li>\\n</ul>\\n<p><strong>结果：页面卡顿，是由于同时渲染大量DOM所引起的，所以下面考虑将渲染过程分批进行：</strong></p>\\n<h2 id=\\\"二、settimeout\\\">二、setTimeout</h2>\\n<pre><code><span class=\\\"hljs-comment\\\">//需要插入的容器</span>\\n<span class=\\\"hljs-keyword\\\">let</span> ul = <span class=\\\"hljs-built_in\\\">document</span>.getElementById(<span class=\\\"hljs-string\\\">'container'</span>);\\n<span class=\\\"hljs-comment\\\">// 插入十万条数据</span>\\n<span class=\\\"hljs-keyword\\\">let</span> total = <span class=\\\"hljs-number\\\">100000</span>;\\n<span class=\\\"hljs-comment\\\">// 一次插入 20 条</span>\\n<span class=\\\"hljs-keyword\\\">let</span> once = <span class=\\\"hljs-number\\\">20</span>;\\n<span class=\\\"hljs-comment\\\">//总页数</span>\\n<span class=\\\"hljs-keyword\\\">let</span> page = total/once\\n<span class=\\\"hljs-comment\\\">//每条记录的索引</span>\\n<span class=\\\"hljs-keyword\\\">let</span> index = <span class=\\\"hljs-number\\\">0</span>;\\n<span class=\\\"hljs-comment\\\">//循环加载数据</span>\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title\\\">loop</span>(<span class=\\\"hljs-params\\\">curTotal,curIndex</span>)</span>{\\n    <span class=\\\"hljs-keyword\\\">if</span>(curTotal &lt;= <span class=\\\"hljs-number\\\">0</span>){\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    }\\n    <span class=\\\"hljs-comment\\\">//每页多少条</span>\\n    <span class=\\\"hljs-keyword\\\">let</span> pageCount = <span class=\\\"hljs-built_in\\\">Math</span>.min(curTotal , once);\\n    setTimeout(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span>=&gt;</span>{\\n        <span class=\\\"hljs-keyword\\\">for</span>(<span class=\\\"hljs-keyword\\\">let</span> i = <span class=\\\"hljs-number\\\">0</span>; i &lt; pageCount; i++){\\n            <span class=\\\"hljs-keyword\\\">let</span> li = <span class=\\\"hljs-built_in\\\">document</span>.createElement(<span class=\\\"hljs-string\\\">'li'</span>);\\n            li.innerText = curIndex + i + <span class=\\\"hljs-string\\\">' : '</span> + ~~(<span class=\\\"hljs-built_in\\\">Math</span>.random() * total)\\n            ul.appendChild(li)\\n        }\\n        loop(curTotal - pageCount,curIndex + pageCount)\\n    },<span class=\\\"hljs-number\\\">0</span>)\\n}\\nloop(total,index);</code></pre><p><strong>导致结果：渲染加快但是有白屏或闪屏现象</strong></p>\\n<h5 id=\\\"1、闪屏原因\\\">1、闪屏原因</h5>\\n<blockquote>\\n<ul>\\n<li><strong>FPS</strong>：表示的是每秒钟画面更新次数，是描述帧变化速度的物理量。</li>\\n</ul>\\n</blockquote>\\n<ul>\\n<li><strong>FPS为60frame/s</strong>：大多显示器会以每秒60次的频率，不断的更新屏幕上的图像。</li>\\n<li><strong>16.7ms</strong>：根据视觉暂留现象，最平滑动画的最佳循环间隔是1000ms/60，约等于16.7ms。</li>\\n</ul>\\n<h5 id=\\\"2、settimeout与闪屏的关系---刷新步调可能会-不一致\\\">2、setTimeout与闪屏的关系 -&gt; 刷新步调可能会 不一致</h5>\\n<blockquote>\\n<ul>\\n<li>setTimeout的执行时间并不是确定的。实际执行时间可能会比其设定的时间晚一些。</li>\\n</ul>\\n</blockquote>\\n<ul>\\n<li>刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的刷新频率可能会不同，而setTimeout只能设置一个固定时间间隔，这个时间不一定和屏幕的刷新时间相同。</li>\\n</ul>\\n<p>以上两种情况都会导致setTimeout的执行步调和屏幕的<strong>刷新步调不一致</strong>。\\n在setTimeout中对dom进行操作，必须要等到屏幕下次绘制时才能更新到屏幕上，如果两者步调不一致，就<strong>可能导致中间某一帧的操作被跨越过去</strong>，而直接更新下一帧的元素，从而<strong>导致丢帧现象</strong>。</p>\\n<h2 id=\\\"三、requestanimationframe（不会产生丢帧现象）\\\">三、requestAnimationFrame（不会产生丢帧现象）</h2>\\n<p>requestAnimationFrame是系统来决定回调函数的执行时机。它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次，这样就不会引起丢帧现象。</p>\\n<pre><code><span class=\\\"hljs-comment\\\">//需要插入的容器</span>\\n<span class=\\\"hljs-keyword\\\">let</span> ul = <span class=\\\"hljs-built_in\\\">document</span>.getElementById(<span class=\\\"hljs-string\\\">'container'</span>);\\n<span class=\\\"hljs-comment\\\">// 插入十万条数据</span>\\n<span class=\\\"hljs-keyword\\\">let</span> total = <span class=\\\"hljs-number\\\">100000</span>;\\n<span class=\\\"hljs-comment\\\">// 一次插入 20 条</span>\\n<span class=\\\"hljs-keyword\\\">let</span> once = <span class=\\\"hljs-number\\\">20</span>;\\n<span class=\\\"hljs-comment\\\">//总页数</span>\\n<span class=\\\"hljs-keyword\\\">let</span> page = total/once\\n<span class=\\\"hljs-comment\\\">//每条记录的索引</span>\\n<span class=\\\"hljs-keyword\\\">let</span> index = <span class=\\\"hljs-number\\\">0</span>;\\n<span class=\\\"hljs-comment\\\">//循环加载数据</span>\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title\\\">loop</span>(<span class=\\\"hljs-params\\\">curTotal,curIndex</span>)</span>{\\n    <span class=\\\"hljs-keyword\\\">if</span>(curTotal &lt;= <span class=\\\"hljs-number\\\">0</span>){\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    }\\n    <span class=\\\"hljs-comment\\\">//每页多少条</span>\\n    <span class=\\\"hljs-keyword\\\">let</span> pageCount = <span class=\\\"hljs-built_in\\\">Math</span>.min(curTotal , once);\\n    <span class=\\\"hljs-built_in\\\">window</span>.requestAnimationFrame(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\"></span>)</span>{\\n        <span class=\\\"hljs-keyword\\\">for</span>(<span class=\\\"hljs-keyword\\\">let</span> i = <span class=\\\"hljs-number\\\">0</span>; i &lt; pageCount; i++){\\n            <span class=\\\"hljs-keyword\\\">let</span> li = <span class=\\\"hljs-built_in\\\">document</span>.createElement(<span class=\\\"hljs-string\\\">'li'</span>);\\n            li.innerText = curIndex + i + <span class=\\\"hljs-string\\\">' : '</span> + ~~(<span class=\\\"hljs-built_in\\\">Math</span>.random() * total)\\n            ul.appendChild(li)\\n        }\\n        loop(curTotal - pageCount,curIndex + pageCount)\\n    })\\n}\\nloop(total,index);\\n</code></pre><p><strong>结果：很流畅，没有出现闪烁丢帧的现象，但还能再优化</strong></p>\\n<h2 id=\\\"四、使用-documentfragment\\\">四、使用 DocumentFragment</h2>\\n<blockquote>\\n<ul>\\n<li>DocumentFragment，文档片段接口，它被作为一个轻量版的 Document 使用。DocumentFragments是DOM节点，但并不是    DOM树的一部分，可以认为是存在内存中的，所以将子元素插入到文档片段时不会引起页面回流。可以用于避免回流操作。</li>\\n</ul>\\n</blockquote>\\n<ul>\\n<li>可以使用document.createDocumentFragment 方法或者构造函数来创建一个空的 DocumentFragment.</li>\\n</ul>\\n<pre><code><span class=\\\"hljs-comment\\\">//需要插入的容器</span>\\n<span class=\\\"hljs-keyword\\\">let</span> ul = <span class=\\\"hljs-built_in\\\">document</span>.getElementById(<span class=\\\"hljs-string\\\">'container'</span>);\\n<span class=\\\"hljs-comment\\\">// 插入十万条数据</span>\\n<span class=\\\"hljs-keyword\\\">let</span> total = <span class=\\\"hljs-number\\\">100000</span>;\\n<span class=\\\"hljs-comment\\\">// 一次插入 20 条</span>\\n<span class=\\\"hljs-keyword\\\">let</span> once = <span class=\\\"hljs-number\\\">20</span>;\\n<span class=\\\"hljs-comment\\\">//总页数</span>\\n<span class=\\\"hljs-keyword\\\">let</span> page = total/once\\n<span class=\\\"hljs-comment\\\">//每条记录的索引</span>\\n<span class=\\\"hljs-keyword\\\">let</span> index = <span class=\\\"hljs-number\\\">0</span>;\\n<span class=\\\"hljs-comment\\\">//循环加载数据</span>\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title\\\">loop</span>(<span class=\\\"hljs-params\\\">curTotal,curIndex</span>)</span>{\\n    <span class=\\\"hljs-keyword\\\">if</span>(curTotal &lt;= <span class=\\\"hljs-number\\\">0</span>){\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    }\\n    <span class=\\\"hljs-comment\\\">//每页多少条</span>\\n    <span class=\\\"hljs-keyword\\\">let</span> pageCount = <span class=\\\"hljs-built_in\\\">Math</span>.min(curTotal , once);\\n    <span class=\\\"hljs-built_in\\\">window</span>.requestAnimationFrame(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\"></span>)</span>{\\n        <span class=\\\"hljs-keyword\\\">let</span> fragment = <span class=\\\"hljs-built_in\\\">document</span>.createDocumentFragment();\\n        <span class=\\\"hljs-keyword\\\">for</span>(<span class=\\\"hljs-keyword\\\">let</span> i = <span class=\\\"hljs-number\\\">0</span>; i &lt; pageCount; i++){\\n            <span class=\\\"hljs-keyword\\\">let</span> li = <span class=\\\"hljs-built_in\\\">document</span>.createElement(<span class=\\\"hljs-string\\\">'li'</span>);\\n            li.innerText = curIndex + i + <span class=\\\"hljs-string\\\">' : '</span> + ~~(<span class=\\\"hljs-built_in\\\">Math</span>.random() * total)\\n            fragment.appendChild(li)\\n        }\\n        ul.appendChild(fragment)\\n        loop(curTotal - pageCount,curIndex + pageCount)\\n    })\\n}\\nloop(total,index);</code></pre><h2 id=\\\"四、使用-display\\\">四、使用 display</h2>\\n<p>可以先将元素脱离文档流、对其修改、在带回文档流，比如 display:none，添加修改完最后 在display: block</p>\\n\"","export default \"<h1 id=\\\"diff算法概述\\\">diff算法概述</h1>\\n<h3 id=\\\"1传统的diff算法为何是n3\\\">1.传统的diff算法为何是n^3</h3>\\n<p>有新旧两个节点beforeNode, afterNode</p>\\n<ul>\\n<li>取新旧两个节点的最大长度来遍历对比(<strong>for循环n^2</strong>)<pre><code class=\\\"language-javascript\\\"><span class=\\\"hljs-keyword\\\">let</span> result = []; <span class=\\\"hljs-comment\\\">// 记录节点需要进行的操作</span>\\n<span class=\\\"hljs-keyword\\\">const</span> diffNodes = <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">beforeNode, afterNode</span>) </span>{\\n  <span class=\\\"hljs-comment\\\">// 获取较大节点树的长度</span>\\n  <span class=\\\"hljs-keyword\\\">let</span> count = <span class=\\\"hljs-built_in\\\">Math</span>.max(beforeNode.children.length, afterNode.children.length);\\n  <span class=\\\"hljs-comment\\\">// 循环遍历进行新旧每个节点的对比(n^2)</span>\\n  <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-keyword\\\">let</span> i = <span class=\\\"hljs-number\\\">0</span>; i &lt; count; i++) {\\n      <span class=\\\"hljs-keyword\\\">const</span> beforeTag = beforeLeaf.children[i];\\n      <span class=\\\"hljs-keyword\\\">const</span> afterTag = afterLeaf.children[i];\\n       ...\\n  }\\n  <span class=\\\"hljs-keyword\\\">return</span> result;\\n}</code></pre>\\n</li>\\n</ul>\\n<ul>\\n<li>分析情况做出相应操作</li>\\n</ul>\\n<ol>\\n<li>第一种情况<pre><code class=\\\"language-javascript\\\"><span class=\\\"hljs-selector-tag\\\">if</span> (beforeNode === undefined) {\\n   <span class=\\\"hljs-selector-tag\\\">result</span><span class=\\\"hljs-selector-class\\\">.push</span>({ <span class=\\\"hljs-attribute\\\">type</span>: <span class=\\\"hljs-string\\\">\\\"add\\\"</span>, <span class=\\\"hljs-attribute\\\">el</span>: afterTag }); <span class=\\\"hljs-comment\\\">// 旧的位置没有</span>\\n}</code></pre>\\n</li>\\n<li>第二种情况<pre><code class=\\\"language-javascript\\\"><span class=\\\"hljs-selector-tag\\\">if</span> (afterNode === undefined) {\\n   <span class=\\\"hljs-selector-tag\\\">result</span><span class=\\\"hljs-selector-class\\\">.push</span>({ <span class=\\\"hljs-attribute\\\">type</span>: <span class=\\\"hljs-string\\\">\\\"remove\\\"</span>, <span class=\\\"hljs-attribute\\\">el</span>: beforeTag }); <span class=\\\"hljs-comment\\\">// 旧的位置没有</span>\\n}</code></pre>\\n</li>\\n<li>第三种情况<pre><code class=\\\"language-javascript\\\"><span class=\\\"hljs-selector-tag\\\">if</span> (beforeTag.tagName !== afterTag.tagName) {\\n   <span class=\\\"hljs-comment\\\">// 节点名改变时，删除 beforeTag 节点，添加 afterTag 节点</span>\\n   <span class=\\\"hljs-selector-tag\\\">result</span><span class=\\\"hljs-selector-class\\\">.push</span>({ <span class=\\\"hljs-attribute\\\">type</span>: <span class=\\\"hljs-string\\\">\\\"remove\\\"</span>, <span class=\\\"hljs-attribute\\\">element</span>: beforeTag });\\n   <span class=\\\"hljs-selector-tag\\\">result</span><span class=\\\"hljs-selector-class\\\">.push</span>({ <span class=\\\"hljs-attribute\\\">type</span>: <span class=\\\"hljs-string\\\">\\\"add\\\"</span>, <span class=\\\"hljs-attribute\\\">element</span>: afterTag });\\n}</code></pre>\\n</li>\\n<li>第四种情况<pre><code class=\\\"language-javascript\\\"><span class=\\\"hljs-selector-tag\\\">else</span> <span class=\\\"hljs-selector-tag\\\">if</span> (beforeTag.innerHTML !== afterTag.innerHTML) {\\n   <span class=\\\"hljs-selector-tag\\\">if</span> (beforeTag.children.length === <span class=\\\"hljs-number\\\">0</span>) {\\n       <span class=\\\"hljs-selector-tag\\\">result</span><span class=\\\"hljs-selector-class\\\">.push</span>({\\n           <span class=\\\"hljs-attribute\\\">type</span>: <span class=\\\"hljs-string\\\">\\\"changed\\\"</span>,\\n           <span class=\\\"hljs-attribute\\\">beforeElement</span>: beforeTag,\\n           <span class=\\\"hljs-attribute\\\">afterElement</span>: afterTag,\\n           <span class=\\\"hljs-attribute\\\">html</span>: afterTag.innerHTML\\n       });\\n   } else {\\n       <span class=\\\"hljs-comment\\\">// 递归比较</span>\\n       <span class=\\\"hljs-selector-tag\\\">diffNodes</span>(beforeTag, afterTag);\\n   }\\n}</code></pre>\\n</li>\\n</ol>\\n<ul>\\n<li><p>进行最后的最小操作数计算(<strong>此时操作上升为n^3</strong>)，我们大致简单理解一下，真实算法有兴趣可以自行查询<a href=\\\"http://vldb.org/pvldb/vol5/p334_mateuszpawlik_vldb2012.pdf\\\">Trees Edit Distance</a></p>\\n<blockquote>\\n<p><a href=\\\"https://www.zhihu.com/question/66851503/answer/246766239\\\">掘金react的diff 从O(n^3)到 O(n) </a></p>\\n</blockquote>\\n<p>  最小操作就是计算更新为新的dom时所需要的最少步骤</p>\\n<pre><code>Prev                               Last\\n        <span class=\\\"hljs-keyword\\\">div</span>                             <span class=\\\"hljs-keyword\\\">div</span> \\n       / \\\\                             / \\\\ \\n     ul   p     ====&gt;            p   p\\n    /  \\\\                             |    \\n  li   li                           <span class=\\\"hljs-keyword\\\">text</span> \\n  |\\n <span class=\\\"hljs-keyword\\\">text</span>\\n最优方式可以删除Prev的ul节点，再插入一个新的P节点，最后再p节点下插入<span class=\\\"hljs-keyword\\\">text</span>。总共三步。</code></pre></li>\\n</ul>\\n<hr>\\n<h3 id=\\\"2-优化的diff算法n\\\">2. 优化的diff算法n</h3>\\n<blockquote>\\n<p><a href=\\\"https://www.jianshu.com/p/398e63dc1969\\\">简书传统diff、react优化diff、vue优化diff</a><br><a href=\\\"https://blog.csdn.net/sexy_squirrel/article/details/79801940\\\">react的diff</a>\\n<a href=\\\"https://www.cnblogs.com/wind-lanyan/p/9061684.html\\\">vue的diff</a></p>\\n</blockquote>\\n<p><strong>React &amp; Vue</strong></p>\\n<ul>\\n<li>两者都采用的是同级比较，且通过唯一的key值来比对。只需要对比同一key的dom，如果不同就不需要继续考虑子级别dom，所以复杂度为n。</li>\\n</ul>\\n<ul>\\n<li><p>React短板在于ABCD=&gt;DABC, 遵从lastIndex比对原则，newIndex &lt; lastIndex则移动，否则不变，ABC会分别移动到D的后面，而不是D移动 </p>\\n<p>到最前面，这就是性能浪费。</p>\\n<blockquote>\\n<p>1&gt; 当前lastIndex为0，newVNode第一个为D，即nextIndex = 0，找到D在oldVNode中索引为3，即prevIndex = 3，prevIndex &gt; lastIndex 不移动, nextIndex++，lastIndex = Math.max(lastIndex, prevIndex) = 3<br> 2&gt; nextIndex = 1, lastIndex为3，第二个为A，prevIndex = 0，prevIndex &lt; lastIndex, 移动，nextIndex++, lastIndex = Math.max(3, 0) = 3<br> 3&gt; ...如此循环，直到循环结束<br> 4&gt; 判断oldVNode中并没有newVNode中没有的节点，不执行remove操作, 到此ABC都进行了dom操作</p>\\n</blockquote>\\n</li>\\n</ul>\\n<ul>\\n<li><p>Vue采用了新旧虚拟dom的首尾对比阶段。即先进行新旧两种dom首尾四种比对，如果满足就进行操作。如果4种比较都没匹配，如果设置了key，就会用key进行比较，在比较的过程中，变量会往中间靠，一旦StartIdx&gt;EndIdx表明oldCh和newCh至少有一个已经遍历完了，就会结束比较。</p>\\n<p>1&gt; 遍历生成虚拟dom</p>\\n<pre><code class=\\\"language-javascript\\\">  <span class=\\\"hljs-comment\\\">// body下的 &lt;div id=\\\"v\\\" class=\\\"classA\\\"&gt;&lt;div&gt; 对应的 oldVnode 就是</span>\\n  {\\n    <span class=\\\"hljs-attribute\\\">el</span>:  div  <span class=\\\"hljs-comment\\\">//对真实的节点的引用，本例中就是document.querySelector('#id.classA')</span>\\n    <span class=\\\"hljs-attribute\\\">tagName</span>: <span class=\\\"hljs-string\\\">'DIV'</span>,   <span class=\\\"hljs-comment\\\">//节点的标签</span>\\n    <span class=\\\"hljs-attribute\\\">sel</span>: <span class=\\\"hljs-string\\\">'div#v.classA'</span>  <span class=\\\"hljs-comment\\\">//节点的选择器</span>\\n    <span class=\\\"hljs-attribute\\\">data</span>: null,       <span class=\\\"hljs-comment\\\">// 一个存储节点属性的对象，对应节点的el[prop]属性，例如onclick , style</span>\\n    <span class=\\\"hljs-attribute\\\">children</span>: [], <span class=\\\"hljs-comment\\\">//存储子节点的数组，每个子节点也是vnode结构</span>\\n    <span class=\\\"hljs-attribute\\\">text</span>: null,    <span class=\\\"hljs-comment\\\">//如果是文本节点，对应文本节点的textContent，否则为null</span>\\n  }</code></pre>\\n<p>2&gt; 首先进行patch方法比对新旧Vnode，执行sameVnode方法比较，也就是比较是不是同一类型且属性不变\\n3&gt; sameVnode不通过就执行删除添加操作，通过执行patchVnode方法，oldVnode === vnode引用相同就视为不变，如果不同再比较text，text不同触发setTextContent 修改text，text相同只有oldVnode有子节点就执行remove操作，如果只有newVnode有子节点就执行add操作，都不满足就执行updateChildren方法，对子节点比对，这是核心diff\\n4&gt; oldStart，oldEnd，newStart，newEnd首尾两两比较，当oldStartIdx &gt; oldEndIdx &amp;&amp; newStartIdx &gt; newEndIdx时就中断比较。</p>\\n<blockquote>\\n<p>vue diff ABCD =&gt; DBA 从两侧向中间比对</p>\\n<ol>\\n<li>oldStart = A, oldEnd = D, newStart = D, newEnd = A. oldStart匹配到newEnd，真实dom中A移动最后，\\noldEnd匹配到newStart, 真实dom中D移动到最前面</li>\\n<li>oldStart = B, oldEnd = C, newStart = B, newEnd = B, oldStart匹配到newStart，真实dom中B不变，</li>\\n<li>newStartIdx++ 0-&gt;1-&gt;2，newEndIdx-- 为3-&gt;2-&gt;1, oldStartIdx++ 为0-&gt;1-&gt;2，oldEndIdx-- 为2-&gt;1-&gt;0，newStartInx &gt; newEndIdx, 新的Vnode遍历结束，终止diff</li>\\n</ol>\\n</blockquote>\\n</li>\\n</ul>\\n<ul>\\n<li>Vue在比对新旧节点时，如果两个节点是同一类型，但是仅仅只是属性发生变化，比如className，Vue会执行删除当前节点\\n添加新的节点的操作，而React只会更新相关的属性<pre><code class=\\\"language-javascript\\\"><span class=\\\"hljs-comment\\\">// vue</span>\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title\\\">sameVnode</span><span class=\\\"hljs-params\\\">(oldVnode, vnode)</span></span>{\\n  <span class=\\\"hljs-comment\\\">//两节点key值相同，并且sel属性值相同，即认为两节点属同一类型，可进行下一步比较</span>\\n  <span class=\\\"hljs-keyword\\\">return</span> vnode.key === oldVnode.key &amp;&amp; vnode.sel === oldVnode.sel\\n}</code></pre>\\n</li>\\n</ul>\\n<p><strong>Key的重要性</strong>  </p>\\n<p> key是实现diff优化操作的关键，假如没有key。ABCD=&gt;DCBA 过程中，如果简单判断A和D，B和C，C和B，D和A比对后，就会进行四次dom替换，如果彻底比对就需要n^3复杂度。如果有key，只需要进行同key值判断就可以了。</p>\\n<hr>\\n<p>End</p>\\n\"","export default \"<h2 id=\\\"函数组合包含在函数式编程范畴中，就是一种将已被分解的简单任务组合成复杂任务的过程\\\">函数组合包含在函数式编程范畴中，就是一种将已被分解的简单任务组合成复杂任务的过程</h2>\\n<h3 id=\\\"一、什么是组合\\\">一、<strong><em>什么是组合</em></strong></h3>\\n<pre><code class=\\\"language-js\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title\\\">compose</span><span class=\\\"hljs-params\\\">(f, g)</span><span class=\\\"hljs-comment\\\">{\\n    return function(x) {\\n        return  f(g(x))\\n    }</span>\\n}\\n// <span class=\\\"hljs-title\\\">compose</span><span class=\\\"hljs-params\\\">(f,g)</span><span class=\\\"hljs-params\\\">(x)</span> === <span class=\\\"hljs-title\\\">f</span><span class=\\\"hljs-params\\\">(g(x)</span>)\\n// <span class=\\\"hljs-title\\\">compose</span><span class=\\\"hljs-params\\\">(f,g,m)</span><span class=\\\"hljs-params\\\">(x)</span> === <span class=\\\"hljs-title\\\">f</span><span class=\\\"hljs-params\\\">(g(m(x)</span>))\\n// <span class=\\\"hljs-title\\\">compose</span><span class=\\\"hljs-params\\\">(f,g,m)</span><span class=\\\"hljs-params\\\">(x)</span> === <span class=\\\"hljs-title\\\">f</span><span class=\\\"hljs-params\\\">(g(m(x)</span>))\\n// <span class=\\\"hljs-title\\\">compose</span><span class=\\\"hljs-params\\\">(f,g,m,n)</span><span class=\\\"hljs-params\\\">(x)</span> === <span class=\\\"hljs-title\\\">f</span><span class=\\\"hljs-params\\\">(g(m(n(x)</span>)))\\n//···\\n</span></code></pre>\\n<p><code>compose</code>函数，接受若干个函数作为参数；每个函数执行后的输出作为下一个函数的输入；直到最后一个函数执行完毕</p>\\n<h3 id=\\\"二、应用compose函数\\\">二、<strong><em>应用compose函数</em></strong></h3>\\n<p>假如一个需求，对一个字符串转换为 四舍五入 的数字。</p>\\n<ul>\\n<li><strong>常规实现</strong>：</li>\\n</ul>\\n<pre><code class=\\\"language-js\\\"><span class=\\\"hljs-keyword\\\">let</span> n = '<span class=\\\"hljs-number\\\">3.56</span>';\\n<span class=\\\"hljs-keyword\\\">let</span> data = parse<span class=\\\"hljs-constructor\\\">Float(<span class=\\\"hljs-params\\\">n</span>)</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> result = <span class=\\\"hljs-module-access\\\"><span class=\\\"hljs-module\\\"><span class=\\\"hljs-identifier\\\">Math</span>.</span></span>round(data); <span class=\\\"hljs-comment\\\">// =&gt;4 最终结果</span></code></pre>\\n<ul>\\n<li><strong>compose实现</strong>：</li>\\n</ul>\\n<pre><code class=\\\"language-js\\\"><span class=\\\"hljs-keyword\\\">let</span> n = <span class=\\\"hljs-string\\\">'3.56'</span>;\\n<span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-built_in\\\">number</span> = compose(<span class=\\\"hljs-built_in\\\">Math</span>.round,<span class=\\\"hljs-built_in\\\">parseFloat</span>);\\n<span class=\\\"hljs-keyword\\\">let</span> result = <span class=\\\"hljs-built_in\\\">number</span>(n); <span class=\\\"hljs-comment\\\">// =&gt;4 最终结果</span></code></pre>\\n<blockquote>\\n<p>这个组合的过程就是函数式组合！我们将两个函数组合一起便能构造出新的函数</p>\\n</blockquote>\\n<h3 id=\\\"三、实现组合\\\">三、<strong><em>实现组合</em></strong></h3>\\n<blockquote>\\n<p>概括来说，就是接收若干个函数作为参数，返回一个新函数。新函数执行时，按照 <span style=\\\"color: red\\\">由右向左</span> 的顺序依次执行传入compose中的函数，每个函数的执行结果作为为下一个函数的输入，直至最后一个函数的输出作为最终的输出结果</p>\\n</blockquote>\\n<pre><code class=\\\"language-js\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title\\\">compose</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-rest_arg\\\">...fns</span>)</span></span>{\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span><span class=\\\"hljs-params\\\">(x)</span></span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> fns.reduceRight(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span><span class=\\\"hljs-params\\\">(arg,fn)</span></span>{\\n            <span class=\\\"hljs-keyword\\\">return</span> fn(arg);\\n        },x)\\n    }\\n}\\n接受的参数是不确定的，是一个数组，然后由右向左执行函数</code></pre>\\n<h3 id=\\\"四、实现管道\\\">四、<strong><em>实现管道</em></strong></h3>\\n<blockquote>\\n<p>从左至右处理数据流的过程称之为管道(pipeline)! <br/>\\n即管道的执行顺序是<span style=\\\"color: red\\\">由左向右</span></p>\\n</blockquote>\\n<pre><code class=\\\"language-js\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title\\\">pipe</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-rest_arg\\\">...fns</span>)</span></span>{\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span><span class=\\\"hljs-params\\\">(x)</span></span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> fns.reduce(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span><span class=\\\"hljs-params\\\">(arg,fn)</span></span>{\\n            <span class=\\\"hljs-keyword\\\">return</span> fn(arg);\\n        },x)\\n    }\\n}</code></pre>\\n\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blink-smooth\":\"blink-smooth-34C_Up9D\"};","module.exports = (__webpack_require__(36))(41);"],"sourceRoot":""}